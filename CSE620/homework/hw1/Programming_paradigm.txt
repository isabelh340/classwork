   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Programming paradigm

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
   This article needs additional citations for verification. Please help
   improve this article by adding citations to reliable sources. Unsourced
   material may be challenged and removed. (February 2011)
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   A programming paradigm is a fundamental style of computer programming,
   a way of building the structure and elements of computer programs.
   Capabilities and styles of various programming languages are defined by
   their supported programming paradigms; some programming languages are
   designed to follow only one paradigm, while others support multiple
   paradigms.

   Programming paradigms that are often distinguished include imperative,
   declarative, functional, object-oriented, logic and symbolic
   programming.^[1]^[2]^[3]

Contents

     * 1 Overview
     * 2 History
          + 2.1 Machine code
          + 2.2 Procedural languages
          + 2.3 Object-oriented programming
          + 2.4 Further paradigms
     * 3 Multi-paradigm
     * 4 See also
     * 5 References
     * 6 External links

Overview[edit]

   Overview of the various programming paradigms according to Peter Van
   Roy^[4]^:5

   Just as software engineering (as a process) is defined by differing
   methodologies, so the programming languages (as models of computation)
   are defined by differing paradigms. Some languages are designed to
   support one particular paradigm (Smalltalk supports object-oriented
   programming, Haskell supports functional programming), while other
   programming languages support multiple paradigms (such as Object
   Pascal, C++, Java, C#, Scala, Visual Basic, Common Lisp, Scheme, Perl,
   Python, Ruby, Oz and F#). For example, programs written in C++ or
   Object Pascal can be purely procedural, purely object-oriented, or they
   can contain elements of both or other paradigms. Software designers and
   programmers decide how to use those paradigm elements.

   In object-oriented programming, programmers can think of a program as a
   collection of interacting objects, while in functional programming a
   program can be thought of as a sequence of stateless function
   evaluations. When programming computers or systems with many
   processors, process-oriented programming allows programmers to think
   about applications as sets of concurrent processes acting upon
   logically shared data structures.

   Many programming paradigms are as well known for what techniques they
   forbid as for what they enable. For instance, pure functional
   programming disallows the use of side-effects, while structured
   programming disallows the use of the goto statement. Partly for this
   reason, new paradigms are often regarded as doctrinaire or overly rigid
   by those accustomed to earlier styles.^[5] Avoiding certain techniques
   can make it easier to prove theorems about a program's correctness – or
   simply to understand its behavior.

   Programming paradigms can also be compared with programming models that
   are abstractions of computer systems. For example, the "von Neumann
   model" is a programming model used in traditional sequential computers.
   For parallel computing, there are many possible models typically
   reflecting different ways processors can be interconnected. The most
   common are based on shared memory, distributed memory with message
   passing, or a hybrid of the two.

   Some programming language researchers criticise the notion of paradigms
   as a classification of programming languages, e.g. Krishnamurthi.^[6]
   They argue that many programming languages cannot be strictly
   classified into one paradigm, but rather include features from several
   paradigms.

History[edit]

   Different approaches to programming have developed over time, being
   identified as such either at the time or retrospectively. An early
   approach consciously identified as such is structured programming,
   advocated since the mid 1960s. The concept of a "programming paradigm"
   as such dates at least to 1978, in the Turing Award lecture of Robert
   W. Floyd, entitled The Paradigms of Programming, which cites the notion
   of paradigm as used by Thomas Kuhn in his The Structure of Scientific
   Revolutions (1962).^[7]

Machine code[edit]

   The lowest level programming paradigms are machine code, which directly
   represents the instructions (the contents of program memory) as a
   sequence of numbers, and assembly language where the machine
   instructions are represented by mnemonics and memory addresses can be
   given symbolic labels. These are sometimes called first- and
   second-generation languages.

   In the 1960s, assembly languages were developed to support library COPY
   and quite sophisticated conditional macro generation and pre-processing
   capabilities, CALL to (subroutines), external variables and common
   sections (globals), enabling significant code re-use and isolation from
   hardware specifics via use of logical operators such as
   READ/WRITE/GET/PUT. Assembly was, and still is, used for time critical
   systems and frequently in embedded systems as it gives the most direct
   control of what the machine actually does.

Procedural languages[edit]

   The next advance was the development of procedural languages. These
   third-generation languages (the first described as high-level
   languages) use vocabulary related to the problem being solved. For
   example,
     * COBOL (COmmon Business Oriented Language) – uses terms like file,
       move and copy.
     * FORTRAN (FORmula TRANslation) – using mathematical language
       terminology, it was developed mainly for scientific and engineering
       problems.
     * ALGOL (ALGOrithmic Language) – focused on being an appropriate
       language to define algorithms, while using mathematical language
       terminology and targeting scientific and engineering problems just
       like FORTRAN.
     * PL/I (Programming Language One) – a hybrid commercial/scientific
       general purpose language supporting pointers.
     * BASIC (Beginners All purpose Symbolic Instruction Code) – it was
       developed to enable more people to write programs.
     * C – a general-purpose programming language, initially developed by
       Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs.

   All these languages follow the procedural paradigm. That is, they
   describe, step by step, exactly the procedure that should, according to
   the particular programmer at least, be followed to solve a specific
   problem. The efficacy and efficiency of any such solution are both
   therefore entirely subjective and highly dependent on that programmer's
   experience, inventiveness and ability.

Object-oriented programming[edit]

   Later, object-oriented languages (like Simula, Smalltalk, C++, C#,
   Eiffel and Java) were created. In these languages, data, and methods of
   manipulating the data, are kept as a single unit called an object. The
   only way that a user can access the data is via the object's "methods"
   (subroutines). Because of this, the internal workings of an object may
   be changed without affecting any code that uses the object. There is
   still some controversy by notable programmers such as Alexander
   Stepanov, Richard Stallman^[8] and others, concerning the efficacy of
   the OOP paradigm versus the procedural paradigm. The necessity of every
   object to have associative methods leads some skeptics to associate OOP
   with software bloat. Polymorphism was developed as one attempt to
   resolve this dilemma.

   Since object-oriented programming is considered a paradigm, not a
   language, it is possible to create even an object-oriented assembler
   language. High Level Assembly (HLA) is an example of this that fully
   supports advanced data types and object-oriented assembly language
   programming – despite its early origins. Thus, differing programming
   paradigms can be thought of as more like "motivational memes" of their
   advocates – rather than necessarily representing progress from one
   level to the next. Precise comparisons of the efficacy of competing
   paradigms are frequently made more difficult because of new and
   differing terminology applied to similar (but not identical) entities
   and processes together with numerous implementation distinctions across
   languages.

Further paradigms[edit]

   Within imperative programming, which is based on procedural languages,
   literate programming, which structures programs as a human-centered
   web, as in a hypertext essay – documentation is integral to the
   program, and the program is structured following the logic of prose
   exposition, rather than compiler convenience.

   Independent of the imperative branch, declarative programming paradigms
   were developed. In these languages the computer is told what the
   problem is, not how to solve the problem – the program is structured as
   a collection of properties to find in the expected result, not as a
   procedure to follow. Given a database or a set of rules, the computer
   tries to find a solution matching all the desired properties. The
   archetypical example of a declarative language is the fourth generation
   language SQL, as well as the family of functional languages and logic
   programming.

   Functional programming is a subset of declarative programming. Programs
   written using this paradigm use functions, blocks of code intended to
   behave like mathematical functions. Functional languages discourage
   changes in the value of variables through assignment, making a great
   deal of use of recursion instead.

   The logic programming paradigm views computation as automated reasoning
   over a corpus of knowledge. Facts about the problem domain are
   expressed as logic formulae, and programs are executed by applying
   inference rules over them until an answer to the problem is found, or
   the collection of formulae is proved inconsistent.

   Symbolic programming is a paradigm that describes programs able to
   manipulate formulas and program components as data.^[3] Programs can
   thus effectively modify themselves, and appear to "learn", making them
   suited for applications such as artificial intelligence, expert
   systems, natural language processing and computer games. Languages that
   support this paradigm include LISP and Prolog.^[9]

Multi-paradigm[edit]

   See also: Comparison of multi-paradigm programming languages

   A multi-paradigm programming language is a programming language that
   supports more than one programming paradigm.^[10] As Leda designer
   Timothy Budd puts it: "The idea of a multiparadigm language is to
   provide a framework in which programmers can work in a variety of
   styles, freely intermixing constructs from different paradigms." The
   design goal of such languages is to allow programmers to use the best
   tool for a job, admitting that no one paradigm solves all problems in
   the easiest or most efficient way.

   One example is C#, which includes imperative and object-oriented
   paradigms as well as some support for functional programming through
   type inference, anonymous functions and Language Integrated Query.
   Other examples are F# and Scala, which provides similar functionality
   to C# but also includes full support for functional programming
   (including currying, pattern matching, algebraic data types, lazy
   evaluation, tail recursion, immutability, etc.). Perhaps the most
   extreme example is Oz, which has subsets that adhere to logic (Oz
   descends from logic programming), functional, object-oriented, dataflow
   concurrent, and other paradigms. Oz was designed over a ten-year period
   to combine in a harmonious way concepts that are traditionally
   associated with different programming paradigms. Lisp, while often
   taught as a functional language, is known for its malleability and thus
   its ability to engulf many paradigms.

See also[edit]

     * Comparison of programming paradigms
     * Type system
     * Architecture description language
     * Domain-specific language
     * Mindset
     * Modeling language
     * Paradigm
     * Programming domain
     * Turing completeness
     * Von Neumann programming languages

References[edit]

    1. ^ Nørmark, Kurt. Overview of the four main programming paradigms.
       Aalborg University, 9 May 2011. Retrieved 22 September 2012.
    2. ^ Frans Coenen (1999-10-11). "Characteristics of declarative
       programming languages". cgi.csc.liv.ac.uk. Retrieved 2014-02-20.
    3. ^ ^a ^b Michael A. Covington (2010-08-23). "CSCI/ARTI 4540/6540:
       First Lecture on Symbolic Programming and LISP" (PDF). University
       of Georgia. Retrieved 2013-11-20.
    4. ^ Peter Van Roy (2009-05-12). "Programming Paradigms for Dummies:
       What Every Programmer Should Know" (PDF). info.ucl.ac.be. Retrieved
       2014-01-27.
    5. ^ Frank Rubin published a criticism of Dijkstra's letter in the
       March 1987 CACM where it appeared under the title 'GOTO Considered
       Harmful' Considered Harmful. Frank Rubin (March 1987). "'GOTO
       Considered Harmful' Considered Harmful" (PDF). Communications of
       the ACM 30 (3): 195–196. doi:10.1145/214748.315722. ^[dead link]
    6. ^ Krishnamurthi, Shriram (November 2008). "Teaching programming
       languages in a post-linnaean age". SIGPLAN. ACM. pp. 81–83. Not.
       43, 11. .
    7. ^ Floyd, R. W. (1979). "The paradigms of programming".
       Communications of the ACM 22 (8): 455. doi:10.1145/359138.359140.
       edit
    8. ^ "Mode inheritance, cloning, hooks & OOP (Google Groups
       Discussion)". ^[dead link]
    9. ^ "Business glossary: Symbolic programming definition".
       allbusiness.com. Retrieved 2014-07-30.
   10. ^ "Multi-Paradigm Programming Language". developer.mozilla.org.
       Retrieved 21 October 2013.

External links[edit]

     * Classification of the principal programming paradigms
     * How programming paradigms evolve and get adopted?



   Software engineering


     * v
     * t
     * e

   Types of computer languages
     * Architecture description
     * Hardware description
     * Markup
     * Modeling
     * Programming language
     * Query
     * Specification
     * Stylesheet
     * Template processing
     * Transformation



                    * v
     * t
     * e

   Software engineering
       Fields
                    * Computer programming
                    * Software requirements
                    * Software deployment
                    * Software design
                    * Software maintenance
                    * Software testing
                    * Systems analysis
                    * Formal methods

      Concepts
                    * Data modeling
                    * Enterprise architecture
                    * Functional specification
                    * Modeling language
                    * Orthogonality
                    * Programming paradigm
                    * Software
                    * Software architecture
                    * Software development methodology
                    * Software development process
                    * Software quality
                    * Software quality assurance
                    * Software archaeology
                    * Structured analysis

    Orientations
                    * Agile
                    * Aspect-oriented
                    * Object orientation
                    * Ontology
                    * Service orientation
                    * SDLC

       Models

                  Developmental
                                 * Agile
                                 * EUP
                                 * Executable UML
                                 * Incremental model
                                 * Iterative model
                                 * Prototype model
                                 * RAD
                                 * UP

                      Other
                                 * SPICE
                                 * CMMI
                                 * Data model
                                 * ER model
                                 * Function model
                                 * Information model
                                 * Metamodeling
                                 * Object model
                                 * Systems model
                                 * View model

                    Languages
                                 * IDEF
                                 * UML
                                 * SysML

      Software
   engineers
                    * Kent Beck
                    * Grady Booch
                    * Fred Brooks
                    * Barry Boehm
                    * Ward Cunningham
                    * Tom DeMarco
                    * Martin Fowler
                    * C. A. R. Hoare
                    * Watts Humphrey
                    * Michael A. Jackson
                    * Ivar Jacobson
                    * Stephen J. Mellor
                    * Bertrand Meyer
                    * David Parnas
                    * Winston W. Royce
                    * James Rumbaugh
                    * Niklaus Wirth
                    * Edward Yourdon
                    * Victor Basili
                    * Craig Larman

   Related fields
                    * Computer science
                    * Computer engineering
                    * Project management
                    * Systems engineering

     * Category Category
     * Commons


                           * v
     * t
     * e

   Major fields of computer science
           Mathematical foundations
                                               * Mathematical logic
                                               * Set theory
                                               * Number theory
                                               * Graph theory
                                               * Type theory
                                               * Category theory
                                               * Numerical analysis
                                               * Information theory
                                               * Combinatorics
                                               * Boolean algebra

             Theory of computation
                                               * Automata theory
                                               * Computability theory
                                               * Computational complexity theory
                                               * Quantum computing theory

          Algorithms, data structures
                                               * Analysis of algorithms
                                               * Algorithm design
                                               * Combinatorial optimization
                                               * Computational geometry

       Programming languages, compilers
                                               * Parsers
                                               * Interpreters
                                               * Procedural programming
                                               * Object-oriented programming
                                               * Functional programming
                                               * Logic programming
                                               * Programming paradigms

   Concurrent, parallel, distributed systems
                                               * Multiprocessing
                                               * Grid computing
                                               * Concurrency control

             Software engineering
                                               * Requirements analysis
                                               * Software design
                                               * Computer programming
                                               * Formal methods
                                               * Software testing
                                               * Software development process

              System architecture
                                               * Computer architecture
                                               * Computer organization
                                               * Operating systems

         Telecommunication, networking
                                               * Computer audio
                                               * Routing
                                               * Network topology
                                               * Cryptography

                   Databases
                                               * Database management systems
                                               * Relational databases
                                               * SQL
                                               * Transactions
                                               * Database indexes
                                               * Data mining

            Artificial intelligence
                                               * Automated reasoning
                                               * Computational linguistics
                                               * Computer vision
                                               * Evolutionary computation
                                               * Expert systems
                                               * Machine learning
                                               * Natural language processing
                                               * Robotics

               Computer graphics
                                               * Visualization
                                               * Computer animation
                                               * Image processing

          Human–computer interaction
                                               * Computer accessibility
                                               * User interfaces
                                               * Wearable computing
                                               * Ubiquitous computing
                                               * Virtual reality

             Scientific computing
                                               * Artificial life
                                               * Bioinformatics
                                               * Cognitive science
                                               * Computational chemistry
                                               * Computational neuroscience
                                               * Computational physics
                                               * Numerical algorithms
                                               * Symbolic mathematics

   Note: Computer science can also be divided into different topics or
   fields according to the ACM Computing Classification System.


   Programming


     * v
     * t
     * e

   Programming language generations
     * Generations Overview
          + 1GL
          + 2GL
          + 3GL
          + 4GL
          + 5GL



         * v
     * t
     * e

   Programming languages
     * Timeline

     * Assembly
     * BASIC
     * C
     * C++
     * C#
     * COBOL
     * Fortran
     * Java
     * JavaScript (JS)
     * Lisp
     * Pascal
     * Perl
     * PHP
     * Python
     * Ruby
     * Smalltalk
     * Visual Basic .NET (VB.NET)
     * more...

     * Category Category
     * Non-article page Comparison
     * List-Class article Lists
          + Alphabetical
          + Categorical
          + Generational
          + Non-English-based



     * v
     * t
     * e

   Types of programming languages
     * Array
     * Aspect-oriented
     * Class-based
     * Concatenative
     * Concurrent
     * Data-structured
     * Dataflow
     * Declarative
     * Domain-specific
     * Dynamic
     * Esoteric
     * Event-driven
     * Extensible
     * Functional
     * Imperative
     * Logic
     * Macro
     * Metaprogramming
     * Multi-paradigm
     * Object-based
     * Object-oriented
     * Pipeline
     * Procedural
     * Prototype-based
     * Reflective
     * Rule-based
     * Scripting
     * Synchronous
     * Templating

     * Assembly
     * Compiled
     * Interpreted
     * Machine

     * Low-level
     * High-level
     * Very high-level

     * First generation
     * Second generation
     * Third generation
     * Fourth generation
     * Fifth generation

     * Non-English-based
     * Off-side rule
     * Visual

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Programming_paradigm&oldid=6
   25472635"
   Categories:
     * Programming paradigms
     * Programming language classification
     * Programming language topics

   Hidden categories:
     * All articles with dead external links
     * Articles with dead external links from January 2013
     * Articles needing additional references from February 2011
     * All articles needing additional references

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * العربية
     * Български
     * Bosanski
     * Català
     * Čeština
     * Dansk
     * Deutsch
     * Eesti
     * Ελληνικά
     * Español
     * Esperanto
     * فارسی
     * Français
     * Galego
     * 한국어
     * Bahasa Indonesia
     * Italiano
     * עברית
     * Latviešu
     * Magyar
     * Македонски
     * Bahasa Melayu
     * Mirandés
     * Nederlands
     * 日本語
     * Norsk bokmål
     * Polski
     * Português
     * Română
     * Русский
     * Shqip
     * Simple English
     * Srpskohrvatski / српскохрватски
     * Suomi
     * Svenska
     * ไทย
     * Türkçe
     * Українська
     * اردو
     * Tiếng Việt
     * 中文
     *

   Edit links

     * This page was last modified on 14 September 2014 at 03:22.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
