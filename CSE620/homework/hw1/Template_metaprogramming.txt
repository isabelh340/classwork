   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Template metaprogramming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
   This article includes a list of references, related reading or external
   links, but its sources remain unclear because it lacks inline
   citations. Please improve this article by introducing more precise
   citations. (June 2010)
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   Template metaprogramming (TMP) is a metaprogramming technique in which
   templates are used by a compiler to generate temporary source code,
   which is merged by the compiler with the rest of the source code and
   then compiled. The output of these templates include compile-time
   constants, data structures, and complete functions. The use of
   templates can be thought of as compile-time execution. The technique is
   used by a number of languages, the best-known being C++, but also Curl,
   D, and XL.

   Template metaprogramming was, in a sense, discovered accidentally: see
   History of TMP.

   Some other languages support similar, if not more powerful compile-time
   facilities (such as Lisp macros), but those are outside the scope of
   this article.

Contents

     * 1 Components of template metaprogramming
          + 1.1 Using template metaprogramming
     * 2 Compile-time class generation
     * 3 Compile-time code optimization
     * 4 Static polymorphism
     * 5 Benefits and drawbacks of template metaprogramming
     * 6 See also
     * 7 References
     * 8 External links

Components of template metaprogramming[edit]

   The use of templates as a metaprogramming technique requires two
   distinct operations: a template must be defined, and a defined template
   must be instantiated. The template definition describes the generic
   form of the generated source code, and the instantiation causes a
   specific set of source code to be generated from the generic form in
   the template.

   Template metaprogramming is Turing-complete, meaning that any
   computation expressible by a computer program can be computed, in some
   form, by a template metaprogram.

   Templates are different from macros. A macro, which is also a
   compile-time language feature, generates code in-line using text
   manipulation and substitution. Macro systems often have limited
   compile-time process flow abilities and usually lack awareness of the
   semantics and type system of their companion language (an exception
   should be made with Lisp's macros, which are written in Lisp itself and
   involve manipulation and substitution of Lisp code represented as data
   structures as opposed to text).

   Template metaprograms have no mutable variables— that is, no variable
   can change value once it has been initialized, therefore template
   metaprogramming can be seen as a form of functional programming. In
   fact many template implementations implement flow control only through
   recursion, as seen in the example below.

Using template metaprogramming[edit]

   Though the syntax of template metaprogramming is usually very different
   from the programming language it is used with, it has practical uses.
   Some common reasons to use templates are to implement generic
   programming (avoiding sections of code which are similar except for
   some minor variations) or to perform automatic compile-time
   optimization such as doing something once at compile time rather than
   every time the program is run — for instance, by having the compiler
   unroll loops to eliminate jumps and loop count decrements whenever the
   program is executed.

Compile-time class generation[edit]

   What exactly "programming at compile-time" means can be illustrated
   with an example of a factorial function, which in non-template C++ can
   be written using recursion as follows:
unsigned int factorial(unsigned int n) {
        return n == 0 ? 1 : n * factorial(n - 1);
}

// Usage examples:
// factorial(0) would yield 1;
// factorial(4) would yield 24.

   The code above will execute at run time to determine the factorial
   value of the literals 4 and 0. By using template metaprogramming and
   template specialization to provide the ending condition for the
   recursion, the factorials used in the program—ignoring any factorial
   not used—can be calculated at compile time by this code:
template <int n>
struct factorial {
        enum { value = n * factorial<n - 1>::value };
};

template <>
struct factorial<0> {
        enum { value = 1 };
};

// Usage examples:
// factorial<0>::value would yield 1;
// factorial<4>::value would yield 24.

   The code above calculates the factorial value of the literals 4 and 0
   at compile time and uses the result as if they were precalculated
   constants. To be able to use templates in this manner, the compiler
   must know the value of its parameters at compile time, which has the
   natural precondition that factorial<X>::value can only be used if X is
   known at compile time. In other words, X must be a constant literal or
   a constant expression.

   In C++11, constexpr, a way to let the compiler execute simple constant
   expressions, was added. Using constexpr, one can use the usual
   recursive factorial definition.[1]

Compile-time code optimization[edit]

   See also: Compile time function execution

   The factorial example above is one example of compile-time code
   optimization in that all factorials used by the program are
   pre-compiled and injected as numeric constants at compilation, saving
   both run-time overhead and memory footprint. It is, however, a
   relatively minor optimization.

   As another, more significant, example of compile-time loop-unrolling,
   template metaprogramming can be used to create length-n vector classes
   (where n is known at compile time). The benefit over a more traditional
   length-n vector is that the loops can be unrolled, resulting in very
   optimized code. As an example, consider the addition operator. A
   length-n vector addition might be written as
template <int length>
Vector<length>& Vector<length>::operator+=(const Vector<length>& rhs)
{
    for (int i = 0; i < length; ++i)
        value[i] += rhs.value[i];
    return *this;
}

   When the compiler instantiates the function template defined above, the
   following code may be produced:
template <>
Vector<2>& Vector<2>::operator+=(const Vector<2>& rhs)
{
    value[0] += rhs.value[0];
    value[1] += rhs.value[1];
    return *this;
}

   The compiler's optimizer should be able to unroll the for loop because
   the template parameter length is a constant at compile time.

   However, take caution as this may cause code bloat as separate unrolled
   code will be generated for each 'N'(vector size) you instantiate with.

Static polymorphism[edit]

   Polymorphism is a common standard programming facility where derived
   objects can be used as instances of their base object but where the
   derived objects' methods will be invoked, as in this code
class Base
{
public:
    virtual void method() { std::cout << "Base"; }
    virtual ~Base() {}
};

class Derived : public Base
{
public:
    virtual void method() { std::cout << "Derived"; }
};

int main()
{
    Base *pBase = new Derived;
    pBase->method(); //outputs "Derived"
    delete pBase;
    return 0;
}

   where all invocations of virtual methods will be those of the
   most-derived class. This dynamically polymorphic behaviour is
   (typically) obtained by the creation of virtual look-up tables for
   classes with virtual methods, tables that are traversed at run time to
   identify the method to be invoked. Thus, run-time polymorphism
   necessarily entails execution overhead (though on modern architectures
   the overhead is small).

   However, in many cases the polymorphic behaviour needed is invariant
   and can be determined at compile time. Then the Curiously Recurring
   Template Pattern (CRTP) can be used to achieve static polymorphism,
   which is an imitation of polymorphism in programming code but which is
   resolved at compile time and thus does away with run-time virtual-table
   lookups. For example:
template <class Derived>
struct base
{
    void interface()
    {
         // ...
         static_cast<Derived*>(this)->implementation();
         // ...
    }
};

struct derived : base<derived>
{
     void implementation()
     {
         // ...
     }
};

   Here the base class template will take advantage of the fact that
   member function bodies are not instantiated until after their
   declarations, and it will use members of the derived class within its
   own member functions, via the use of a static_cast, thus at compilation
   generating an object composition with polymorphic characteristics. As
   an example of real-world usage, the CRTP is used in the Boost iterator
   library [2].

   Another similar use is the "Barton–Nackman trick", sometimes referred
   to as "restricted template expansion", where common functionality can
   be placed in a base class that is used not as a contract but as a
   necessary component to enforce conformant behaviour while minimising
   code redundancy.

Benefits and drawbacks of template metaprogramming[edit]

   Compile-time versus execution-time tradeoff
          If a great deal of template metaprogramming is used, compilation
          may become slow; section 14.7.1 [temp.inst] of the current
          standard defines the circumstances under which templates are
          implicitly instantiated. Defining a template does not imply that
          it will be instantiated, and instantiating a class template does
          not cause its member definitions to be instantiated. Depending
          on the style of use, templates may compile either faster or
          slower than hand-rolled code.

   Generic programming
          Template metaprogramming allows the programmer to focus on
          architecture and delegate to the compiler the generation of any
          implementation required by client code. Thus, template
          metaprogramming can accomplish truly generic code, facilitating
          code minimization and better maintainability^[citation needed].

   Readability
          With respect to C++, the syntax and idioms of template
          metaprogramming are esoteric compared to conventional C++
          programming, and template metaprograms can be very difficult to
          understand. Metaprograms can thus be difficult to maintain by
          programmers inexperienced in template metaprogramming (though
          this may vary with the language's implementation of template
          metaprogramming syntax). On the other hand, template
          metaprogramming can often be used to make programs much shorter
          and simpler, and thus more readable^[citation needed].

See also[edit]

     * Substitution failure is not an error (SFINAE)
     * Metaprogramming
     * Preprocessor
     * Parametric polymorphism
     * Expression templates
     * Variadic Templates
     * Compile time function execution

References[edit]

     * Eisenecker, Ulrich W.. Generative Programming: Methods, Tools, and
       Applications. Addison-Wesley. ISBN 0-201-30977-7.
     * Alexandrescu, Andrei. Modern C++ Design: Generic Programming and
       Design Patterns Applied. Addison-Wesley. ISBN 3-8266-1347-3.
     * Abrahams, David; Gurtovoy, Aleksey. C++ Template Metaprogramming:
       Concepts, Tools, and Techniques from Boost and Beyond.
       Addison-Wesley. ISBN 0-321-22725-5.
     * Vandervoorde, David; Josuttis, Nicolai M.. C++ Templates: The
       Complete Guide. Addison-Wesley. ISBN 0-201-73484-2.
     * Clavel, Manuel. Reflection in Rewriting Logic: Metalogical
       Foundations and Metaprogramming Applications. ISBN 1-57586-238-7.

External links[edit]

     * "The Boost Metaprogramming Library (Boost MPL)".
     * "The Spirit Library".  (built using template-metaprogramming)
     * "The Boost Lambda library".  (use STL algorithms easily)
     * Veldhuizen, Todd (May 1995). "Using C++ template metaprograms". C++
       Report 7 (4): 36–43.
     * "Template Haskell".  (type-safe metaprogramming in Haskell)
     * Bright, Walter. "Templates Revisited".  (template metaprogramming
       in the D programming language)
     * Koskinen, Johannes. "Metaprogramming in C++".
     * Attardi, Giuseppe; Cisternino, Antonio. "Reflection support by
       means of template metaprogramming".
     * Burton, Michael C.; Griswold, William G.; McCulloch, Andrew D.;
       Huber, Gary A. STATIC DATA STRUCTURES. CiteSeerX: 10.1.1.14.5881.
     * Amjad, Zeeshan. "Template Meta Programming and Number Theory".
     * Amjad, Zeeshan. "Template Meta Programming and Number Theory: Part
       2".
     * "A library for LISP-style programming in C++".

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Template_metaprogramming&old
   id=621732616"
   Categories:
     * Metaprogramming
     * C++

   Hidden categories:
     * Articles lacking in-text citations from June 2010
     * All articles lacking in-text citations
     * All articles with unsourced statements
     * Articles with unsourced statements from June 2014
     * Articles with example C++ code

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Deutsch
     * Eesti
     * Français
     * 한국어
     * Nederlands
     * 日本語
     * Türkçe
     * 中文
     *

   Edit links

     * This page was last modified on 18 August 2014 at 05:51.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
