   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Literate programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
   Not to be confused with Natural language programming.
   Literate Programming by Donald Knuth is the seminal book on literate
   programming

   Literate programming is an approach to programming introduced by Donald
   Knuth in which a program is given as an explanation of the program
   logic in a natural language, such as English, interspersed with
   snippets of macros and traditional source code, from which a compilable
   source code can be generated.^[1]

   The literate programming paradigm, as conceived by Knuth, represents a
   move away from writing programs in the manner and order imposed by the
   computer, and instead enables programmers to develop programs in the
   order demanded by the logic and flow of their thoughts.^[2] Literate
   programs are written as an uninterrupted exposition of logic in an
   ordinary human language, much like the text of an essay, in which
   macros are included to hide abstractions and traditional source code.

   Literate programming tools are used to obtain two representations from
   a literate source file: one suitable for further compilation or
   execution by a computer, the "tangled" code, and another for viewing as
   formatted documentation, which is said to be "woven" from the literate
   source.^[3] While the first generation of literate programming tools
   were computer language-specific, the later ones are language-agnostic
   and exist above the programming languages.

Contents

     * 1 Concept
          + 1.1 Advantages
          + 1.2 Contrast with documentation generation
     * 2 Example
     * 3 Tools
     * 4 See also
     * 5 References
     * 6 Further reading
     * 7 External links

Concept[edit]

   A literate program is an explanation of the program logic in a natural
   language, such as English, interspersed with snippets of macros and
   traditional source code. Macros in a literate source file are simply
   title-like or explanatory phrases in a human language that describe
   human abstractions created while solving the programming problem, and
   hiding chunks of code or lower-level macros. These macros are similar
   to the algorithms in pseudocode typically used in teaching computer
   science. These arbitrary explanatory phrases become precise new
   operators, created on the fly by the programmer, forming a
   meta-language on top of the underlying programming language.

   A preprocessor is used to substitute arbitrary hierarchies, or rather
   "interconnected 'webs' of macros",^[4] to produce the compilable source
   code with one command ("tangle"), and documentation with another
   ("weave"). The preprocessor also provides an ability to write out the
   content of the macros and to add to already created macros in any place
   in the text of the literate program source file, thereby disposing of
   the need to keep in mind the restrictions imposed by traditional
   programming languages or to interrupt the flow of thought.

Advantages[edit]

   According to Knuth,^[5] ^[6] literate programming provides
   higher-quality programs, since it forces programmers to explicitly
   state the thoughts behind the program, making poorly thought-out design
   decisions more obvious. Knuth also claims that literate programming
   provides a first-rate documentation system, which is not an add-on, but
   is grown naturally in the process of exposition of one's thoughts
   during a program's creation.^[7] The resulting documentation allows
   authors to restart their own thought processes at any later time, and
   allows other programmers to understand the construction of the program
   more easily. This differs from traditional documentation, in which a
   programmer is presented with source code that follows a
   compiler-imposed order, and must decipher the thought process behind
   the program from the code and its associated comments. The
   meta-language capabilities of literate programming are also claimed to
   facilitate thinking, giving a higher "bird's eye view" of the code and
   increasing the number of concepts the mind can successfully retain and
   process. Applicability of the concept to programming on a large scale,
   that of commercial-grade programs, is proven by an edition of TeX code
   as a literate program.^[citation needed]

Contrast with documentation generation[edit]

   Literate programming is very often misunderstood^[8] to refer only to
   formatted documentation produced from a common file with both source
   code and comments – which is properly called documentation generation –
   or to voluminous commentaries included with code. This is backwards:
   well-documented code or documentation extracted from code follows the
   structure of the code, with documentation embedded in the code; in
   literate programming code is embedded in documentation, with the code
   following the structure of the documentation.

   This misconception has led to claims that comment-extraction tools,
   such as the Perl Plain Old Documentation or Java Javadoc systems, are
   "literate programming tools". However, because these tools do not
   implement the "web of abstract concepts" hiding behind the system of
   natural-language macros, or provide an ability to change the order of
   the source code from a machine-imposed sequence to one convenient to
   the human mind, they cannot properly be called literate programming
   tools in the sense intended by Knuth.^[8]^[9]

Example[edit]

   A classic example of literate programming is the literate
   implementation of the standard Unix wc word counting program. Knuth
   presented a CWEB version of this example in Chapter 12 of his Literate
   Programming book. The same example was later rewritten for the noweb
   literate programming tool.^[10] This example provides a good
   illustration of the basic elements of literate programming.

   Creation of macros

   The following snippet of the wc literate program^[10] shows how
   arbitrary descriptive phrases in a natural language are used in a
   literate program to create macros, which act as new "operators" in the
   literate programming language, and hide chunks of code or other macros.
   The mark-up notation consists of double angle brackets ("<<...>>") that
   indicate macros, the "@" symbol which indicates the end of the code
   section in a noweb file. The "<<*>>" symbol stands for the "root",
   topmost node the literate programming tool will start expanding the web
   of macros from. Actually, writing out the expanded source code can be
   done from any section or subsection (i.e. a piece of code designated as
   "<<name of the chunk>>=", with the equal sign), so one literate program
   file can contain several files with machine source code.
The purpose of wc is to count lines, words, and/or characters in a list of files
. The
number of lines in a file is ......../more explanations/

Here, then, is an overview of the file wc.c that is defined by the noweb program
 wc.nw:
    <<*>>=
    <<Header files to include>>
    <<Definitions>>
    <<Global variables>>
    <<Functions>>
    <<The main program>>
    @

We must include the standard I/O definitions, since we want to send formatted ou
tput
to stdout and stderr.
    <<Header files to include>>=
    #include <stdio.h>
    @

   Note also that the unraveling of the chunks can be done in any place in
   the literate program text file, not necessarily in the order they are
   sequenced in the enclosing chunk, but as is demanded by the logic
   reflected in the explanatory text that envelops the whole program.

   Program as a web—macros are not just section names

   Macros are not the same as "section names" in standard documentation.
   Literate programming macros can hide any chunk of code behind
   themselves, and be used inside any low-level machine language
   operators, often inside logical operators such as "if", "while" or
   "case". This is illustrated by the following snippet of the wc literate
   program.^[10]
The present chunk, which does the counting, was actually one of
the simplest to write. We look at each character and change state if it begins o
r ends
a word.

    <<Scan file>>=
    while (1) {
      <<Fill buffer if it is empty; break at end of file>>
      c = *ptr++;
      if (c > ' ' && c < 0177) {
        /* visible ASCII codes */
        if (!in_word) {
          word_count++;
          in_word = 1;
        }
        continue;
      }
      if (c == '\n') line_count++;
      else if (c != ' ' && c != '\t') continue;
      in_word = 0;
        /* c is newline, space, or tab */
    }
    @

   In fact, macros can stand for any arbitrary chunk of code or other
   macros, and are thus more general than top-down or bottom-up
   "chunking", or than subsectioning. Knuth says that when he realized
   this, he began to think of a program as a web of various parts.^[1]

   Order of human logic, not that of the compiler

   In a noweb literate program besides the free order of their exposition,
   the chunks behind macros, once introduced with "<<...>>=", can be grown
   later in any place in the file by simply writing "<<name of the
   chunk>>=" and adding more content to it, as the following snippet
   illustrates ("plus" is added by the document formatter for readability,
   and is not in the code).^[10]
 The grand totals must be initialized to zero at the beginning of the program.
If we made these variables local to main, we would have to do this  initializati
on
explicitly; however, C globals are automatically zeroed. (Or rather,``statically
zeroed.'' (Get it?)

    <<Global variables>>+=
    long tot_word_count, tot_line_count,
         tot_char_count;
      /* total number of words, lines, chars */
    @

   Record of the train of thought

   The documentation for a literate program is produced as part of writing
   the program. Instead of comments provided as side notes to source code
   a literate program contains the explanation of concepts on each level,
   with lower level concepts deferred to their appropriate place, which
   allows for better communication of thought. The snippets of the
   literate wc above show how an explanation of the program and its source
   code are interwoven. Such exposition of ideas creates the flow of
   thought that is like a literary work. Knuth wrote a "novel" which
   explains the code of the computer strategy game Colossal Cave
   Adventure.^[11]

Tools[edit]

   The first published literate programming environment was WEB,
   introduced by Donald Knuth in 1981 for his TeX typesetting system; it
   uses Pascal as its underlying programming language and TeX for
   typesetting of the documentation. The complete commented TeX source
   code was published in Knuth's TeX: The program, volume B of his
   5-volume Computers and Typesetting. Knuth had privately used a literate
   programming system called DOC as early as 1979. He was inspired by the
   ideas of Pierre-Arnoul de Marneffe.^[12] The free CWEB, written by
   Knuth and Silvio Levy, is WEB adapted for C and C++, runs on most
   operating systems and can produce TeX and PDF documentation.

   There are various other implementations of the literate programming
   concept:
     * noweb is independent of the programming language of the source
       code. It is well known for its simplicity: just two text markup
       conventions and two tool invocations are needed to use it, and it
       allows for text formatting in HTML rather than going through the
       TeX system.

     * FunnelWeb is another LP tool that can produce HTML documentation
       output. It has more complicated markup (with "@" escaping any
       FunnelWeb command), but has many more flexible options. Like noweb,
       it is independent of the programming language of the source code.

     * Nuweb can translate a single LP source into any number of code
       files in any mix of languages together with documentation in LaTeX.
       It does it in a single invocation; it does not have separate weave
       and tangle commands. It does not have the extensibility of noweb,
       but it can use the listings package of LaTeX to provide
       pretty-printing and the hyperref package to provide hyperlinks in
       PDF output. It also has extensive indexing and cross-referencing
       facilities including cross-references from the generated code back
       to the documentation, both as automatically generated comments and
       as strings that the code can use to report its behaviour. Vimes is
       a type-checker for Z notation which shows the use of nuweb in a
       practical application. Around 15,000 lines of nuweb source are
       translated into nearly 15,000 lines of C/C++ code and over 460
       pages of documentation. See External links.

     * Molly is a LP tool written in Perl, which aims to modernize and
       scale it with "folding HTML" and "virtual views" on code. It uses
       "noweb" markup for the literate source files. See External links.

     * Codnar is an inverse literate programming tool available as a Ruby
       Gem (see External links). Instead of the machine-readable source
       code being extracted out of the literate documentation sources, the
       literate documentation is extracted out of the normal
       machine-readable source code files. This allows these source code
       files to be edited and maintained as usual. The approach is similar
       to that used by popular API documentation tools, such as JavaDoc.
       Such tools, however, generate API reference documentation, while
       Codnar generates a linear narrative describing the code, similar to
       that created by classical LP tools. Codnar can co-exist with API
       documentation tools, allowing both a reference manual and a linear
       narrative to be generated from the same set of source code files.

     * The Leo text editor is an outlining editor which supports optional
       noweb and CWEB markup. The author of Leo mixes two different
       approaches: first, Leo is an outlining editor, which helps with
       management of large texts; second, Leo incorporates some of the
       ideas of literate programming, which in its pure form (i.e. the way
       it is used by Knuth Web tool and/or tools like "noweb") is possible
       only with some degree of inventiveness and the use of the editor in
       a way not exactly envisioned by its author (in modified @root
       nodes). However, this and other extensions (@file nodes) make
       outline programming and text management successful and easy and in
       some ways similar to literate programming.^[13]

     * The Haskell programming language has native support for
       semi-literate programming, generally inspired by CWEB but with a
       significantly reduced functionality and simpler implementation.
       When aiming for TeX output, one writes a plain LaTeX file where
       source code is marked by a given surrounding environment; LaTeX can
       be set up to handle that environment, while the Haskell compiler
       looks for the right markers to identify Haskell statements to
       compile, removing the TeX documentation as if they were comments.
       However, as described above, this is not literate programming in
       the sense intended by Knuth. Haskell's functional, modular
       nature^[14] makes literate programming directly in the language
       somewhat easier, but it is not nearly as powerful as one of the WEB
       tools where "tangle" can reorganize in arbitrary ways.

     * The Web 68 Literate Programming system uses Algol 68 as the
       underlying programming language, although there is nothing in the
       pre-processor 'tang' to force the use of that language.^[15]

     * Emacs org-mode for literate programming through Babel,^[16] which
       allows embedding blocks of source code from multiple programming
       languages^[17] within a single text document. Blocks of code can
       share data with each other, display images inline, or be parsed
       into pure source code using the noweb reference syntax.^[18]

See also[edit]

     * Sweave – an example of use of the "noweb"-like Literate Programming
       tool inside the R language for creation of dynamic statistical
       reports
     * Self-documenting code – source code that can be easily understood
       without documentation

References[edit]

    1. ^ ^a ^b ^v ^w ^x ^y ^z Knuth, Donald E. (1984). "Literate
       Programming" (PDF). The Computer Journal (British Computer Society)
       27 (2): 97–111. doi:10.1093/comjnl/27.2.97. Retrieved January 4,
       2009.
    2. ^ "I had the feeling that top-down and bottom-up were opposing
       methodologies: one more suitable for program exposition and the
       other more suitable for program creation. But after gaining
       experience with WEB, I have come to realize that there is no need
       to choose once and for all between top-down and bottom-up, because
       a program is best thought of as a web instead of a tree. A
       hierarchical structure is present, but the most important thing
       about a program is its structural relationships. A complex piece of
       software consists of simple parts and simple relations between
       those parts; the programmer's task is to state those parts and
       those relationships, in whatever order is best for human
       comprehension not in some rigidly determined order like top-down or
       bottom-up." — Donald E. Knuth, Literate Programming^[1]
    3. ^ If one remembers that the first version of the tool was called
       WEB, the amusing literary reference hidden by Knuth in these names
       becomes obvious: "Oh, what a tangled web we weave when first we
       practise to deceive" – Sir Walter Scott, in Canto VI, Stanza 17 of
       Marmion (1808) an epic poem about the Battle of Flodden Field in
       1513. – the actual citation appeared as an epigraph in a May 1986
       article by Jon Bentley and Donald Knuth in one of the classical
       Programming Pearls columns in Communications of the ACM, vol 29 num
       5 on p.365
    4. ^

     "WEB's macros are allowed to have at most one parameter. Again, I
     did this in the interests of simplicity, because I noticed that most
     applications of multiple parameters could in fact be reduced to the
     one-parameter case. For example, suppose that you want to define
     something like... In other words, the name of one macro can usefully
     be a parameter to another macro. This particular trick makes it
     possible to..."
     —Donald E. Knuth, Literate Programming^[1]
    5. ^ Knuth, Donald E.; Binstock, Andrew (April 25, 2008). "Interview
       with Donald Knuth". Retrieved January 4, 2009. "Yet to me, literate
       programming is certainly the most important thing that came out of
       the TeX project. Not only has it enabled me to write and maintain
       programs faster and more reliably than ever before, and been one of
       my greatest sources of joy since the 1980s-it has actually been
       indispensable at times. Some of my major programs, such as the MMIX
       meta-simulator, could not have been written with any other
       methodology that I've ever heard of. The complexity was simply too
       daunting for my limited brain to handle; without literate
       programming, the whole enterprise would have flopped miserably. ...
       Literate programming is what you need to rise above the ordinary
       level of achievement."
    6. ^

     "Another surprising thing that I learned while using WEB was that
     traditional programming languages had been causing me to write
     inferior programs, although I hadn't realized what I was doing. My
     original idea was that WEB would be merely a tool for documentation,
     but I actually found that my WEB programs were better than the
     programs I had been writing in other languages."
     —Donald E. Knuth, Literate Programming^[1]
    7. ^

     "Thus the WEB language allows a person to express programs in a
     "stream of consciousness" order. TANGLE is able to scramble
     everything up into the arrangement that a PASCAL compiler demands.
     This feature of WEB is perhaps its greatest asset; it makes a
     WEB-written program much more readable than the same program written
     purely in PASCAL, even if the latter program is well commented. And
     the fact that there's no need to be hung up on the question of
     top-down versus bottom-up, since a programmer can now view a large
     program as a web, to be explored in a psychologically correct order
     is perhaps the greatest lesson I have learned from my recent
     experiences."
     —Donald E. Knuth, Literate Programming^[1]
    8. ^ ^a ^b Dominus, Mark-Jason (March 20, 2000). "POD is not Literate
       Programming". Perl.com. Archived from the original on January 2,
       2009.
    9. ^

     "I chose the name WEB partly because it was one of the few
     three-letter words of English that hadn't already been applied to
     computers. But as time went on, I've become extremely pleased with
     the name, because I think that a complex piece of software is,
     indeed, best regarded as a web that has been delicately pieced
     together from simple materials. We understand a complicated system
     by understanding its simple parts, and by understanding the simple
     relations between those parts and their immediate neighbors. If we
     express a program as a web of ideas, we can emphasize its structural
     properties in a natural and satisfying way."
     —Donald E. Knuth, Literate Programming^[1]
   10. ^ ^a ^b ^c ^d Ramsey, Norman (May 13, 2008). "An Example of noweb".
       Retrieved January 4, 2009.
   11. ^ The game, also known as ADVENT, was originally written by
       Crowther in about 700 lines of FORTRAN code; Knuth recast it into
       the WEB idiom. It is available at literateprogramming.com or on
       Knuth's website.
   12. ^ de Marneffe, Pierre Arnoul (December 1973). Holon Programming –
       Report PMAR 73-23. University de Liège, Service d'Informatique.
   13. ^ Ream, Edward K. (September 2, 2008). "Leo's Home Page". Retrieved
       January 4, 2009.
   14. ^ Hughes, John (January 9, 2002). Why Functional Programming
       Matters. Institutionen för Datavetenskap, Chalmers Tekniska
       Högskola,. Retrieved March 22, 2011.
   15. ^ Sian Mountbatten. "Web 68: Literate programming with Algol 68".
       Retrieved 1 January 2013.
   16. ^ http://orgmode.org/worg/org-contrib/babel/intro.html
   17. ^ http://orgmode.org/worg/org-contrib/babel/languages.html#langs
   18. ^
       http://orgmode.org/worg/org-contrib/babel/intro.html#literate-progr
       amming

Further reading[edit]

     * Sewell, Wayne (1989). "Weaving a Program: Literate Programming in
       WEB". Van Nostrand Reinhold. ISBN 0-442-31946-0.
     * Knuth, Donald E. (1992). Literate Programming. California: Stanford
       University Center for the Study of Language and Information.
       ISBN 978-0-937073-80-3.
     * Guari, Eitan M. (1994). TeX & LaTeX: Drawing and Literate
       Programming. McGraw Hill. ISBN 0-07-911616-7.  (includes software)
     * Nørmark, Kurt (August 13, 1998). "Literate Programming – Issues and
       Problems". University of Aalborg.
     * Schulte, Eric (January 2012). "A Multi-Language Computing
       Environment for Literate Programming and Reproducible Research" 46
       (3). Journal of Statistical Software.

External links[edit]

     * literateprogramming.com
     * https://weavr.co.uk an online literate programming environment.
     * comp.programming.literate FAQ at Internet FAQ Archives
     * Literate Programming newsgroup
     * LiteratePrograms a literate programming wiki.
     * Select A literate programming example using noweb
     * nuweb The nuweb literate programming tool.
     * Vimes A real project developed using nuweb.
     * z-vimes Alternate source of Vimes.
     * Softpanorama page on literate programming
     * Haskell literate programming
     * Specification of literate programming in the Haskell Report the
       accepted Haskell standard
     * Noweb — A Simple, Extensible Tool for Literate Programming
     * Molly – a standalone tool in Perl, which extends L.P. with "folding
       HTML" and uses noweb markup
     * Codnar – An inverse literate programming tool
     * Funnelweb – a complete standalone tool for L.P. independent of
       target language
     * Lp4all — A Simple Literate Programming Tool with a wiki-like markup
       syntax
     * pyWeb - Literate Programming tool that will work with any markup
       language and any programming language
     * org-babel – an org-mode extension for literate programming in
       emacs.
     * – Using Docbook markup for literate programming. Known as xweb
     * RawFile – a small MediaWiki extension implementing a basic form of
       literate programming
     * Shuffle takes files with chunks of text defined in shuffle
       notation, and filters these chunks according to a requested
       selection of variant and aspects. It is a part of EHC/UHC
       (Essential Haskell Compiler/ Utrecht Haskell Compiler).
     * Knuth: Literate Programming Knuth's home page containing
       information and errata for Literate Programming.
     * RestructuredText to Code A tool for L.P. from RestructuredText
       documents.


                                  * v
     * t
     * e

   Donald Knuth
       Publications
                          * The Art of Computer Programming
                          * "The Complexity of Songs"
                          * Computers and Typesetting
                          * Concrete Mathematics
                          * Surreal Numbers
                          * Things a Computer Scientist Rarely Talks About
                          * Selected papers series

         Software
                          * TeX
                          * METAFONT
                          * MIXAL (MIX
                          * MMIX
                          * GNU MDK)

          Fonts
                          * AMS Euler
                          * Computer Modern
                          * Concrete Roman

   Literate programming
                          * WEB
                          * CWEB

        Algorithms
                          * Knuth's Algorithm X
                          * Knuth–Bendix completion algorithm
                          * Knuth–Morris–Pratt algorithm
                          * Knuth shuffle
                          * Robinson–Schensted–Knuth correspondence
                          * Trabb Pardo–Knuth algorithm
                          * Generalization of Dijkstra's algorithm
                          * Knuth's Simpath algorithm

          Other
                          * Dancing Links
                          * Knuth reward check
                          * Knuth Prize
                          * Man or boy test
                          * Quater-imaginary base
                          * -yllion
                          * Potrzebie system of weights and measures

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Literate_programming&oldid=6
   23826432"
   Categories:
     * Literate programming

   Hidden categories:
     * All articles with unsourced statements
     * Articles with unsourced statements from November 2011
     * Articles with example code

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Català
     * Deutsch
     * Español
     * فارسی
     * Français
     * 한국어
     * 日本語
     * Polski
     * Português
     * Русский
     * 中文
     *

   Edit links

     * This page was last modified on 2 September 2014 at 07:47.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
