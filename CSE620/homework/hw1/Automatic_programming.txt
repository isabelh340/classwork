   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Automatic programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   In computer science, the term automatic programming^[1] identifies a
   type of computer programming in which some mechanism generates a
   computer program to allow human programmers to write the code at a
   higher abstraction level.

   There has been little agreement on the precise definition of automatic
   programming, mostly because its meaning has changed over time. David
   Parnas, tracing the history of "automatic programming" in published
   research, noted that in the 1940s it described automation of the manual
   process of punching paper tape. Later it referred to translation of
   high-level programming languages like Fortran and ALGOL. In fact, one
   of the earliest programs identifiable as a compiler was called
   Autocode. Parnas concluded that "automatic programming has always been
   a euphemism for programming in a higher-level language than was then
   available to the programmer."^[2]

Contents

     * 1 Origin
     * 2 Generative programming
     * 3 Source code generation
          + 3.1 Implementations
     * 4 See also
     * 5 References
     * 6 External links

Origin[edit]

   Mildred Koss, an early UNIVAC programmer, explains: "Writing machine
   code involved several tedious steps—breaking down a process into
   discrete instructions, assigning specific memory locations to all the
   commands, and managing the I/O buffers. After following these steps to
   implement mathematical routines, a sub-routine library, and sorting
   programs, our task was to look at the larger programming process. We
   needed to understand how we might reuse tested code and have the
   machine help in programming. As we programmed, we examined the process
   and tried to think of ways to abstract these steps to incorporate them
   into higher-level language. This led to the development of
   interpreters, assemblers, compilers, and generators—programs designed
   to operate on or produce other programs, that is, automatic
   programming."^[3]

Generative programming[edit]

   Generative programming is a style of computer programming that uses
   automated source code creation through generic frames, classes,
   prototypes, templates, aspects, and code generators to improve
   programmer productivity.^[4] It is often related to code-reuse topics
   such as component-based software engineering and product family
   engineering.

Source code generation[edit]

   Source code generation is the act of generating source code based on an
   ontological model such as a template and is accomplished with a
   programming tool such as a template processor or an integrated
   development environment (IDE). These tools allow the generation of
   source code through any of various means. A macro processor, such as
   the C preprocessor, which replaces patterns in source code according to
   relatively simple rules, is a simple form of source code generator.

Implementations[edit]

   This section may contain promotional material and other spam. Please
   remove any content which is not encyclopedic, and any promotional
   external links in accordance with the external links guideline.
   (October 2010)

   IDEs such as Eclipse, Interface Builder and Microsoft Visual Studio
   have more advanced forms of source code generation, with which the
   programmer can interactively select and customize "snippets" of source
   code. Program "wizards", which allow the programmer to design graphical
   user interfaces interactively while the compiler invisibly generates
   the corresponding source code, are another common form of source code
   generation. This may be contrasted with, for example, user interface
   markup languages, which define user interfaces declaratively.

   Besides the generation of code from a wizard or template, IDEs can also
   generate and manipulate code to automate code refactorings that would
   require multiple (error prone) manual steps, thereby improving
   developer productivity.^[5] Examples of such features in IDEs are the
   refactoring class browsers for Smalltalk and those found in Java IDEs
   like IntelliJ and Eclipse.

   A specialized alternative involves the generation of optimized code for
   quantities defined mathematically within a Computer algebra system
   (CAS). Compiler optimization consisting of finding common intermediates
   of a vector of size n requires a complexity of O(n^2) or O(n^3)
   operations whereas the very design of a computer algebra system
   requires only O(n) operations.^[6]^[7] These facilities can be used as
   pre-optimizer before processing by the compiler. This option has been
   used for handling mathematically large expressions in e.g.
   computational (quantum) chemistry.

   Examples:
     * Acceleo is an open source code generator for Eclipse used to
       generate any textual language (Java, PHP, Python, etc.) from EMF
       models defined from any metamodel (UML, SysML, etc.).

     * Actifsource is a plugin for Eclipse that allows graphical modelling
       and model-based code generation using custom templates.

     * Altova MapForce is a graphical data mapping, conversion, and
       integration tool capable of generating application code in Java,
       C#, or C++ for executing recurrent transformations.

     * CodeFluent Entities from SoftFluent is a graphical tool integrated
       into Microsoft Visual Studio that generates .NET source code, in C#
       or Visual Basic.

     * DMS Software Reengineering Toolkit is a system for defining
       arbitrary domain specific languages and translating them to other
       languages.

     * General-purpose declarative language uses the natural and built-in
       generative programming capabilities provided by macroexpansion in
       Common Lisp in order to achieve seamless automatic programming.

     * hprcARCHITECT (from MNB Technologies, Inc) is an artificial
       intelligence-based software development tool with a Virtual
       Whiteboard human interface. Language and technology agnostic, the
       tool's development was funded by the US Air Force to solve the
       problem of code generation for systems targeting mixed processor
       technologies.

     * Spring Roo is an open source active code generator for Spring
       Framework based Java applications. It uses AspectJ mixins to
       provide separation of concerns during round-trip maintenance.

     * RISE is a free information modeling suite for system development
       using ERD or UML. Database code generation for MySQL, PostgreSQL
       and Microsoft SQL Server. Persistence code generation for C# (.NET)
       and PHP including both SOAP and JSON style web services and AJAX
       proxy code.

     * The Maple computer algebra system offers code generators optimizers
       with Fortran, C and Java. Mathematica and MuPAD have comparable
       interfaces.

     * Screen Sculptor,^[8] SoftCode,^[9] UI Programmer,^[10] and
       Genifer^[11] are examples of pioneering program generators that
       arose during the mid-1980s through the early 1990s. They developed
       and advanced the technology of extendable, template based source
       code generators on a mass market scale.

     * GeneXus is a Cross-Platform, knowledge representation-based,
       development tool,[1] mainly oriented to enterprise-class
       applications for Web applications, smart devices and the Microsoft
       Windows platform. A developer describes an application in a
       high-level, mostly declarative language, from which native code is
       generated for multiple environments.

See also[edit]

   This "see also" section may contain an excessive number of suggestions.
   Please ensure that only the most relevant suggestions are given and
   that they are not red links, and consider integrating suggestions into
   the article itself. (June 2013)
     * Code generation (compiler)
     * Code optimization (compiler)
     * Comparison of code generation tools
     * Template processor
     * Source-to-source compiler
     * Model Driven Engineering (MDE)
     * Model Driven Architecture (MDA)
     * Domain-Specific Modeling (DSM)
     * Feature Oriented Programming
     * Program transformation

     * Modeling language
     * Data transformation
     * Semantic translation
     * Vocabulary-based transformation
     * Metaprogramming
     * Language-oriented programming (LOP)
     * Object-oriented analysis and design (OOAD)
     * Unified Modeling Language (UML)

     * artificial intelligence
     * Multi-agent system
     * Inductive programming

References[edit]

    1. ^ Ricardo Aler Mur, "Automatic Inductive Programming", ICML 2006
       Tutorial. June 2006.
    2. ^ D. L. Parnas. "Software Aspects of Strategic Defense Systems."
       American Scientist. November 1985.
    3. ^ Chun, Wendy. "On Software, or the Persistence of Visual
       Knowledge." Grey Room 18. Boston: 2004, pg. 30.
    4. ^ James Wilcox, "Paying Too Much for Custom Application
       Development", March 2011.
    5. ^ Martin Fowler, "Crossing Refactoring's Rubicon"
    6. ^ C. Gomez and T.C. Scott, Maple Programs for Generating Efficient
       FORTRAN Code for Serial and Vectorized Machines, Comput. Phys.
       Commun. 115, pp. 548-562, 1998 [1].
    7. ^ T.C. Scott, I.P. Grant, M.B. Monagan and V.R. Saunders, Numerical
       Computation of Molecular Integrals via optimized (vectorized)
       FORTRAN code, Proceedings of the Fifth International Workshop on
       New computing Techniques in Physics Research (Software Engineering,
       Neural Nets, Genetic Algorithms, Expert Systems, Symbolic Algebra,
       Automatic Calculations), held in Lausanne (Switzerland), Nucl.
       Instr. Meth. Phys. Res. 389, A, pp. 117-120, 1997 [2].
    8. ^ Screen Sculptor
    9. ^ Announcing Softcode Version 2.5
   10. ^ Wallsoft/Template Garden Software
   11. ^ Application Generators

     * Generative Programming: Methods, Tools, and Applications by
       Krzysztof Czarnecki and Ulrich W. Eisenecker, Addison Wesley, 2000.

External links[edit]

     * Generative Programming book site: www.generative-programming.org
     * Code Generation for Dummies
     * Code Generation with Macrofort

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Automatic_programming&oldid=
   599775841"
   Categories:
     * Programming paradigms
     * Source code generation

   Hidden categories:
     * Wikipedia spam cleanup from October 2010
     * Articles with excessive see also sections from June 2013

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Bosanski
     * Deutsch
     * Español
     * Français
     * Hrvatski
     * Қазақша
     * 日本語
     * Português
     * Русский
     * Slovenščina
     *

   Edit links

     * This page was last modified on 15 March 2014 at 21:30.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
