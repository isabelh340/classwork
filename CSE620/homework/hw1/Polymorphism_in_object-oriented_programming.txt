   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Polymorphism (computer science)

   From Wikipedia, the free encyclopedia
     (Redirected from Polymorphism in object-oriented programming)
   Jump to: navigation, search
           Polymorphism
     * Ad hoc polymorphism
     * Function overloading
     * Operator overloading
     * Parametric polymorphism
     * Double dispatch
     * Multiple dispatch
     * Single & dynamic dispatch
     * Subtyping
     * Virtual function

     * v
     * t
     * e

   In programming languages and type theory, polymorphism (from Greek
   πολύς, polys, "many, much" and μορφή, morphē, "form, shape") is the
   provision of a single interface to entities of different types.^[1] A
   polymorphic type is a type whose operations can also be applied to
   values of some other type, or types.^[2] There are several
   fundamentally different kinds of polymorphism:
     * If a function denotes different and potentially heterogeneous
       implementations depending on a limited range of individually
       specified types and combinations, it is called ad hoc polymorphism.
       Ad hoc polymorphism is supported in many languages using function
       overloading.
     * If the code is written without mention of any specific type and
       thus can be used transparently with any number of new types, it is
       called parametric polymorphism. In the object-oriented programming
       community, this is often known as generics or generic programming.
       In the functional programming community, this is often simply
       called polymorphism.
     * Subtyping (or inclusion polymorphism) is a concept wherein a name
       may denote instances of many different classes as long as they are
       related by some common superclass.^[3] In object-oriented
       programming, this is often referred to simply as polymorphism.

   The interaction between parametric polymorphism and subtyping leads to
   the concepts of variance and bounded quantification.

Contents

     * 1 History
     * 2 Types of polymorphism
          + 2.1 Ad hoc polymorphism
          + 2.2 Parametric polymorphism
          + 2.3 Subtyping
     * 3 Polytypism
     * 4 See also
     * 5 References
     * 6 External links

History[edit]

   Ad hoc polymorphism and parametric polymorphism were originally
   described in Fundamental Concepts in Programming Languages, a set of
   lecture notes written in 1967 by British computer scientist Christopher
   Strachey.^[4] In a 1985 paper, Peter Wegner and Luca Cardelli
   introduced the term inclusion polymorphism to model subtypes and
   inheritance.^[2] However, implementations of subtyping and inheritance
   predate the term 'inclusion polymorphism', having appeared with Simula
   in 1967.

Types of polymorphism[edit]

Ad hoc polymorphism[edit]

   Main article: Ad hoc polymorphism

   Chris Strachey^[4] chose the term ad hoc polymorphism to refer to
   polymorphic functions which can be applied to arguments of different
   types, but which behave differently depending on the type of the
   argument to which they are applied (also known as function overloading
   or operator overloading). The term "ad hoc" in this context is not
   intended to be pejorative; it refers simply to the fact that this type
   of polymorphism is not a fundamental feature of the type system. In the
   example below, the Add functions seem to work generically over various
   types when looking at the invocations, but are considered to be two
   entirely distinct functions by the compiler for all intents and
   purposes:
program Adhoc;

function Add( x, y : Integer ) : Integer;
begin
    Add := x + y
end;

function Add( s, t : String ) : String;
begin
    Add := Concat( s, t )
end;

begin
    Writeln(Add(1, 2));
    Writeln(Add('Hello, ', 'World!'));
end.

   In dynamically typed languages the situation can be more complex as the
   correct function that needs to be invoked might only be determinable at
   run time.

   Implicit type conversion has also been defined as a form of
   polymorphism, referred to as "coercion polymorphism".^[5]

Parametric polymorphism[edit]

   Main article: Parametric polymorphism

   Parametric polymorphism allows a function or a data type to be written
   generically, so that it can handle values identically without depending
   on their type.^[6] Parametric polymorphism is a way to make a language
   more expressive, while still maintaining full static type-safety.

   The concept of parametric polymorphism applies to both data types and
   functions. A function that can evaluate to or be applied to values of
   different types is known as a polymorphic function. A data type that
   can appear to be of a generalized type (e.g., a list with elements of
   arbitrary type) is designated polymorphic data type like the
   generalized type from which such specializations are made.

   Parametric polymorphism is ubiquitous in functional programming, where
   it is often simply referred to as "polymorphism". The following example
   shows a parametrized list data type and two parametrically polymorphic
   functions on them:
data List a = Nil | Cons a (List a)

length :: List a -> Integer
length Nil         = 0
length (Cons x xs) = 1 + length xs

map :: (a -> b) -> List a -> List b
map f Nil         = Nil
map f (Cons x xs) = Cons (f x) (map f xs)

   Parametric polymorphism is also available in several object-oriented
   languages, where it often goes under the name "generics" (for example,
   Java) or "templates" (C++ and D):
class List<T> {
    class Node<T> {
        T elem;
        Node<T> next;
    }
    Node<T> head;
    int length() { ... }
}

List<B> map(Func<A,B> f, List<A> xs) {
    ...
}

   John C. Reynolds (and later Jean-Yves Girard) formally developed this
   notion of polymorphism as an extension to lambda calculus (called the
   polymorphic lambda calculus, or System F). Any parametrically
   polymorphic function is necessarily restricted in what it can do,
   working on the shape of the data instead of its value, leading to the
   concept of parametricity.

Subtyping[edit]

   Main article: Subtyping

   Some languages employ the idea of subtyping to restrict the range of
   types that can be used in a particular case of polymorphism. In these
   languages, subtype polymorphism (sometimes referred to as inclusion
   polymorphism or dynamic polymorphism^[citation needed]) allows a
   function to be written to take an object of a certain type T, but also
   work correctly if passed an object that belongs to a type S that is a
   subtype of T (according to the Liskov substitution principle). This
   type relation is sometimes written S <: T. Conversely, T is said to be
   a supertype of S—written T :> S.

   In the following example we make cats and dogs subtypes of animals. The
   procedure letsHear() accepts an animal, but will also work correctly if
   a subtype is passed to it:
abstract class Animal {
    abstract String talk();
}

class Cat extends Animal {
    String talk() {
        return "Meow!";
    }
}

class Dog extends Animal {
    String talk() {
        return "Woof!";
    }
}

void letsHear(Animal a) {
    println(a.talk());
}

void main() {
    letsHear(new Cat());
    letsHear(new Dog());
}

   In another example, if Number, Rational, and Integer are types such
   that Number :> Rational and Number :> Integer, a function written to
   take a Number will work equally well when passed an Integer or Rational
   as when passed a Number. The actual type of the object can be hidden
   from clients into a black box, and accessed via object identity. In
   fact, if the Number type is abstract, it may not even be possible to
   get your hands on an object whose most-derived type is Number (see
   abstract data type, abstract class). This particular kind of type
   hierarchy is known—especially in the context of the Scheme programming
   language—as a numerical tower, and usually contains many more types.

   Object-oriented programming languages offer subtyping polymorphism
   using subclassing (also known as inheritance). In typical
   implementations, each class contains what is called a virtual table—a
   table of functions that implement the polymorphic part of the class
   interface—and each object contains a pointer to the "vtable" of its
   class, which is then consulted whenever a polymorphic method is called.
   This mechanism is an example of:
     * late binding, because virtual function calls are not bound until
       the time of invocation, and
     * single dispatch (i.e., single-argument polymorphism), because
       virtual function calls are bound simply by looking through the
       vtable provided by the first argument (the this object), so the
       runtime types of the other arguments are completely irrelevant.

   The same goes for most other popular object systems. Some, however,
   such as Common Lisp Object System, provide multiple dispatch, under
   which method calls are polymorphic in all arguments.

Polytypism[edit]

   A related concept is polytypism. A polytypic function is more general
   than polymorphic, and in such a function, "though one can provide fixed
   ad hoc cases for specific data types, an ad hoc combinator is
   absent".^[7]

See also[edit]

     * Type theory
     * Duck typing for polymorphism without (static) types
     * Polymorphic code (Computer virus terminology)
     * System F for a lambda calculus with parametric polymorphism.
     * Type class
     * Virtual inheritance

References[edit]

    1. ^ Bjarne Stroustrup (February 19, 2007). "Bjarne Stroustrup's C++
       Glossary". "polymorphism - providing a single interface to entities
       of different types."
    2. ^ ^a ^b Cardelli, Luca; Wegner, Peter (December 1985). "On
       Understanding Types, Data Abstraction, and Polymorphism". ACM
       Computing Surveys (New York, NY, USA: ACM) 17 (4): 471–523.
       doi:10.1145/6041.6042. ISSN 0360-0300. "Polymorphic types are types
       whose operations are applicable to values of more than one type"
    3. ^ Booch, et all 2007 Object-Oriented Analysis and Design with
       Applications. Addison-Wesley.
    4. ^ ^a ^b C. Strachey - Fundamental Concepts in Programming Languages
       http://www.itu.dk/courses/BPRD/E2009/fundamental-1967.pdf
    5. ^ Allen B. Tucker (28 June 2004). Computer Science Handbook, Second
       Edition. Taylor & Francis. pp. 91–. ISBN 978-1-58488-360-9.
    6. ^ Pierce, B. C. 2002 Types and Programming Languages. MIT Press.
    7. ^ Ralf Lammel and Joost Visser, "Typed Combinators for Generic
       Traversal", in Practical Aspects of Declarative Languages: 4th
       International Symposium (2002), p. 153.

External links[edit]

     * C++ examples of polymorphism
     * Objects and Polymorphism (Visual Prolog)


                    * v
     * t
     * e

   Data types
   Uninterpreted
                    * Bit
                    * Byte
                    * Trit
                    * Tryte
                    * Word

      Numeric
                    * Bignum
                    * Complex
                    * Decimal
                    * Fixed-point
                    * Floating-point
                    * Integer
                         + signedness
                    * Interval
                    * Rational

        Text
                    * Character
                    * String
                         + null-terminated

      Pointer
                    * Address
                         + physical
                         + virtual
                    * Reference

     Composite
                    * Algebraic data type
                         + generalized
                    * Array
                    * Associative array
                    * Class
                    * Dependent
                    * Equality
                    * Inductive
                    * List
                    * Object
                         + metaobject
                    * Option type
                    * Product
                    * Record
                    * Set
                    * Union
                         + tagged

       Other
                    * Boolean
                    * Bottom type
                    * Collection
                    * Enumerated type
                    * Exception
                    * Function type
                    * Opaque data type
                    * Recursive data type
                    * Semaphore
                    * Stream
                    * Top type
                    * Type class
                    * Unit type
                    * Void

   Related topics
                    * Abstract data type
                    * Data structure
                    * Generic
                    * Kind
                         + metaclass
                    * Parametric polymorphism
                    * Primitive data type
                    * Protocol
                         + interface
                    * Subtyping
                    * Type constructor
                    * Type conversion
                    * Type system

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Polymorphism_(computer_scien
   ce)&oldid=613649330"
   Categories:
     * Polymorphism (computer science)
     * Functional programming
     * Object-oriented programming
     * Programming language concepts
     * Type theory
     * Data types

   Hidden categories:
     * All articles with unsourced statements
     * Articles with unsourced statements from September 2013

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * বাংলা
     * Беларуская (тарашкевіца)
     * Български
     * Bosanski
     * Català
     * Čeština
     * Deutsch
     * Eesti
     * Español
     * فارسی
     * Français
     * 한국어
     * हिन्दी
     * Hrvatski
     * Italiano
     * עברית
     * Lietuvių
     * Nederlands
     * 日本語
     * Polski
     * Português
     * Русский
     * Svenska
     * தமிழ்
     * తెలుగు
     * Türkçe
     * Українська
     * 中文
     *

   Edit links

     * This page was last modified on 20 June 2014 at 05:31.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
