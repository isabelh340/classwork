   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Class-based programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
   This article needs additional citations for verification. Please help
   improve this article by adding citations to reliable sources. Unsourced
   material may be challenged and removed. (February 2013)
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   Class-based programming, or more commonly class-orientation, is a style
   of object-oriented programming (OOP) in which inheritance is achieved
   by defining classes of objects, as opposed to the objects themselves
   (compare prototype-based programming).

   The most popular and developed model of OOP is a class-based model, as
   opposed to an object-based model. In this model, objects are entities
   that combine state (i.e., data), behavior (i.e., procedures, or
   methods) and identity (unique existence among all other objects). The
   structure and behavior of an object are defined by a class, which is a
   definition, or blueprint, of all objects of a specific type. An object
   must be explicitly created based on a class and an object thus created
   is considered to be an instance of that class. An object is similar to
   a structure, with the addition of method pointers, member access
   control, and an implicit data member which locates instances of the
   class (i.e. actual objects of that class) in the class hierarchy
   (essential for runtime inheritance features).

Contents

     * 1 Encapsulation
     * 2 Inheritance
     * 3 Critique of class-based models
     * 4 Example languages
     * 5 References
     * 6 See also

Encapsulation[edit]

   Encapsulation prevents users from breaking the invariants of the class,
   which is useful because it allows the implementation of a class of
   objects to be changed for aspects not exposed in the interface without
   impact to user code. The definitions of encapsulation focus on the
   grouping and packaging of related information (cohesion) rather than
   security issues. OOP languages do not normally offer formal security
   restrictions to the internal object state. Using a method of access is
   a matter of convention for the interface design.

Inheritance[edit]

   Main article: Inheritance

   In class-based programming, inheritance is done by defining new classes
   as extensions of existing classes: the existing class is the parent
   class and the new class is the child class. If a child class has only
   one parent class, this is known as single inheritance, while if a child
   class can have more than one parent class, this is known as multiple
   inheritance. This organizes classes into a hierarchy, either a tree (if
   single inheritance) or lattice (if multiple inheritance).

   The defining feature of inheritance is that both interface and
   implementation are inherited; if only interface is inherited, this is
   known as interface inheritance or subtyping. Inheritance can also be
   done without classes, as in prototype-based programming.

Critique of class-based models[edit]

   Class-based languages, or, to be more precise, typed languages, where
   subclassing is the only way of subtyping, have been criticized for
   mixing up implementations and interfaces—the essential principle in
   object-oriented programming. The critics say one might create a bag
   class that stores a collection of objects, then extends it to make a
   new class called a set class where the duplication of objects is
   eliminated.^[1]^[2] Now, a function that takes a bag class may expect
   that adding two objects increases the size of a bag by two, yet if one
   passes an object of a set class, then adding two objects may or may not
   increase the size of a bag by two. The problem arises precisely because
   subclassing implies subtyping even in the instances where the principle
   of subtyping, known as the Liskov substitution principle, does not
   hold. Therefore normally one must distinguish subtyping and
   subclassing. Most current object-oriented languages distinguish
   subtyping and subclassing, however some approaches to design do not.

   Also, another common example is that a person object created from a
   child class cannot become an object of parent class because a child
   class and a parent class inherit a person class but class-based
   languages mostly do not allow to change the kind of class of the object
   at runtime. For class-based languages, this restriction is essential in
   order to preserve unified view of the class to its users. The users
   should not need to care whether one of the implementations of a method
   happens to cause changes that break the invariants of the class. Such
   changes can be made by destroying the object and constructing another
   in its place. Polymorphism can be used to preserve the relevant
   interfaces even when such changes are done, because the objects are
   viewed as black box abstractions and accessed via object identity.
   However, usually the value of object references referring to the object
   is changed, which causes effects to client code.

Example languages[edit]

   Although Simula introduced the class abstraction, the canonical example
   of a class-based language is Smalltalk. Others include PHP, C++, Java,
   C#, and Objective-C.

   See also a list of class-based programming languages.

References[edit]

    1. ^ Kiselyov, Oleg. "Subtyping, Subclassing, and Trouble with OOP".
       Retrieved 7 October 2012.
    2. ^ Ducasse, Stéphane. "A set cannot be a subtype of a bag".
       Retrieved 7 October 2012.

See also[edit]

     * Prototype-based programming (contrast)
     * Programming paradigms
     * class (computer science)


     * v
     * t
     * e

   Types of programming languages
     * Array
     * Aspect-oriented
     * Class-based
     * Concatenative
     * Concurrent
     * Data-structured
     * Dataflow
     * Declarative
     * Domain-specific
     * Dynamic
     * Esoteric
     * Event-driven
     * Extensible
     * Functional
     * Imperative
     * Logic
     * Macro
     * Metaprogramming
     * Multi-paradigm
     * Object-based
     * Object-oriented
     * Pipeline
     * Procedural
     * Prototype-based
     * Reflective
     * Rule-based
     * Scripting
     * Synchronous
     * Templating

     * Assembly
     * Compiled
     * Interpreted
     * Machine

     * Low-level
     * High-level
     * Very high-level

     * First generation
     * Second generation
     * Third generation
     * Fourth generation
     * Fifth generation

     * Non-English-based
     * Off-side rule
     * Visual

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Class-based_programming&oldi
   d=613273078"
   Categories:
     * Object-oriented programming

   Hidden categories:
     * Articles needing additional references from February 2013
     * All articles needing additional references

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * 日本語
     * 中文
     *

   Edit links

     * This page was last modified on 17 June 2014 at 12:03.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
