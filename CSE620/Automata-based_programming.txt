   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Automata-based programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
   For other uses, see Automata-based programming (Shalyto's approach).
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   Automata-based programming is a programming paradigm in which the
   program or its part is thought of as a model of a finite state machine
   (FSM) or any other (often more complicated) formal automaton (see
   automata theory). Sometimes a potentially-infinite set of possible
   states is introduced, and such a set can have a complicated structure,
   not just an enumeration.

   FSM-based programming is generally the same, but, formally speaking,
   doesn't cover all possible variants as FSM stands for finite state
   machine and automata-based programming doesn't necessarily employ FSMs
   in the strict sense.

   The following properties are key indicators for automata-based
   programming:
    1. The time period of the program's execution is clearly separated
       down to the steps of the automaton. Each of the steps is
       effectively an execution of a code section (same for all the
       steps), which has a single entry point. Such a section can be a
       function or other routine, or just a cycle body. The step section
       might be divided down to subsection to be executed depending on
       different states, although this is not necessary.
    2. Any communication between the steps is only possible via the
       explicitly noted set of variables named the state. Between any two
       steps, the program (or its part created using the automata-based
       technique) can not have implicit components of its state, such as
       local (stack) variables' values, return addresses, the current
       instruction pointer etc. That is, the state of the whole program,
       taken at any two moments of entering the step of the automaton, can
       only differ in the values of the variables being considered as the
       state of the automaton.

   The whole execution of the automata-based code is a (possibly explicit)
   cycle of the automaton's steps.

   Another reason to use the notion of automata-based programming is that
   the programmer's style of thinking about the program in this technique
   is very similar to the style of thinking used to solve math-related
   tasks using Turing machine, Markov algorithm etc.

Contents

     * 1 Example
          + 1.1 Traditional (imperative) program in C
          + 1.2 Automata-based style program
          + 1.3 A separate function for the automation step
          + 1.4 Explicit state transition table
          + 1.5 Automation and Automata
               o 1.5.1 Example Program
               o 1.5.2 Automation & Events
          + 1.6 Using object-oriented capabilities
     * 2 Applications
     * 3 History
     * 4 Compared against imperative and procedural programming
     * 5 Object-oriented programming relationship
     * 6 See also
     * 7 References
     * 8 External links

Example[edit]

   Consider a program in C that reads a text from standard input stream,
   line by line, and prints the first word of each line. It is clear we
   need first to read and skip the leading spaces, if any, then read
   characters of the first word and print them until the word ends, and
   then read and skip all the remaining characters until the end-of-line
   character is encountered. Upon reaching the end of line character
   (regardless of the stage), we restart the algorithm from the beginning,
   and upon encountering the end of file condition (regardless of the
   stage), we terminate the program.

Traditional (imperative) program in C[edit]

   The program which solves the example task in traditional (imperative)
   style can look something like this:
#include <stdio.h>
int main(void)
{
    int c;
    do {
        c = getchar();
        while(c == ' ')
            c = getchar();
        while(c != EOF && c != ' ' && c != '\n') {
            putchar(c);
            c = getchar();
        }
        putchar('\n');
        while(c != EOF && c != '\n')
            c = getchar();
    } while(c != EOF);
    return 0;
}

Automata-based style program[edit]

   The same task can be solved by thinking in terms of finite state
   machines. Note that line parsing has three stages: skipping the leading
   spaces, printing the word and skipping the trailing characters. Let's
   call them states before, inside and after. The program may now look
   like this:
#include <stdio.h>
int main(void)
{
    enum states {
        before, inside, after
    } state;
    int c;
    state = before;
    while((c = getchar()) != EOF) {
        switch(state) {
            case before:
                if(c == '\n') {
                    putchar('\n');
                } else
                if(c != ' ') {
                    putchar(c);
                    state = inside;
                }
                break;
            case inside:
                switch(c) {
                    case ' ':  state = after; break;
                    case '\n':
                        putchar('\n');
                        state = before;
                        break;
                    default:   putchar(c);
                }
                break;
            case after:
                if(c == '\n') {
                    putchar('\n');
                    state = before;
                }
        }
    }
    return 0;
}

   Although the code now looks longer, it has at least one significant
   advantage: there's only one reading (that is, call to the getchar()
   function) instruction in the program. Besides that, there's only one
   loop instead of the four the previous versions had.

   In this program, the body of the while loop is the automaton step, and
   the loop itself is the cycle of the automaton's work.
   Automaton's diagram

   The program implements (models) the work of a finite state machine
   shown on the picture. The N denotes the end of line character, the S
   denotes spaces, and the A stands for all the other characters. The
   automaton follows exactly one arrow on each step depending on the
   current state and the encountered character. Some state switches are
   accompanied with printing the character; such arrows are marked with
   asterisks.

   It is not absolutely necessary to divide the code down to separate
   handlers for each unique state. Furthermore, in some cases the very
   notion of the state can be composed of several variables' values, so
   that it could be impossible to handle each possible state explicitly.
   In the discussed program it is possible to reduce the code length by
   noticing that the actions taken in response to the end of line
   character are the same for all the possible states. The following
   program is equal to the previous one but is a bit shorter:
#include <stdio.h>
int main(void)
{
    enum states {
        before, inside, after
    } state;
    int c;
    state = before;
    while((c = getchar()) != EOF) {
        if(c == '\n') {
            putchar('\n');
            state = before;
        } else
        switch(state) {
            case before:
                if(c != ' ') {
                    putchar(c);
                    state = inside;
                }
                break;
            case inside:
                if(c == ' ') {
                    state = after;
                } else {
                    putchar(c);
                }
                break;
            case after:
                break;
        }
    }
    return 0;
}

A separate function for the automation step[edit]

   The most important property of the previous program is that the
   automaton step code section is clearly localized. With a separate
   function for it, we can better demonstrate this property:
#include <stdio.h>
enum states { before, inside, after };
void step(enum states *state, int c)
{
    if(c == '\n') {
        putchar('\n');
        *state = before;
    } else
    switch(*state) {
        case before:
            if(c != ' ') {
                putchar(c);
                *state = inside;
            }
            break;
        case inside:
            if(c == ' ') {
                *state = after;
            } else {
                putchar(c);
            }
            break;
        case after:
            break;
    }
}
int main(void)
{
    int c;
    enum states state = before;
    while((c = getchar()) != EOF) {
        step(&state, c);
    }
    return 0;
}

   This example clearly demonstrates the basic properties of
   automata-based code:
    1. time periods of automaton step executions may not overlap
    2. the only information passed from the previous step to the next is
       the explicitly specified automaton state

Explicit state transition table[edit]

   A finite automaton can be defined by an explicit state transition
   table. Generally speaking, an automata-based program code can naturally
   reflect this approach. In the program below there's an array named
   the_table, which defines the table. The rows of the table stand for
   three states, while columns reflect the input characters (first for
   spaces, second for the end of line character, and the last is for all
   the other characters).

   For every possible combination, the table contains the new state number
   and the flag, which determines whether the automaton must print the
   symbol. In a real life task, this could be more complicated; e.g., the
   table could contain pointers to functions to be called on every
   possible combination of conditions.
#include <stdio.h>
enum states { before = 0, inside = 1, after = 2 };
struct branch {
    unsigned char new_state:2;
    unsigned char should_putchar:1;
};
struct branch the_table[3][3] = {
                 /* ' '         '\n'        others */
    /* before */ { {before,0}, {before,1}, {inside,1} },
    /* inside */ { {after, 0}, {before,1}, {inside,1} },
    /* after  */ { {after, 0}, {before,1}, {after, 0} }
};
void step(enum states *state, int c)
{
    int idx2 = (c == ' ') ? 0 : (c == '\n') ? 1 : 2;
    struct branch *b = & the_table[*state][idx2];
    *state = (enum states)(b->new_state);
    if(b->should_putchar) putchar(c);
}

Automation and Automata[edit]

   Automata-based programming indeed closely matches the programming needs
   found in the field of automation.

   A production cycle is commonly modelled as:
     * A sequence of stages stepping according to input data (from
       captors).
     * A set of actions performed depending on the current stage.

   Various dedicated programming languages allow expressing such a model
   in more or less sophisticated ways.

Example Program[edit]

   The example presented above could be expressed according to this view
   like in the following program. Here pseudo-code uses such conventions:
     * 'set' and 'reset' respectively activate & inactivate a logic
       variable (here a stage)
     * ':' is assignment, '=' is equality test

SPC : ' '
EOL : '\n'

states : (before, inside, after, end)

setState(c) {
    if c=EOF then set end
    if before and (c!=SPC and c!=EOL) then set inside
    if inside and (c=SPC or c=EOL) then set after
    if after and c=EOL then set before
}

doAction(c) {
    if inside then write(c)
    else if c=EOL then write(c)
}

cycle {
    set before
    loop {
        c : readCharacter
        setState(c)
        doAction(c)
    }
    until end
}

   The separation of routines expressing cycle progression on one side,
   and actual action on the other (matching input & output) allows clearer
   and simpler code.

Automation & Events[edit]

   In the field of automation, stepping from step to step depends on input
   data coming from the machine itself. This is represented in the program
   by reading characters from a text. In reality, those data inform about
   position, speed, temperature, etc. of critical elements of a machine.

   Like in GUI programming, changes in the machine state can thus be
   considered as events causing the passage from a state to another, until
   the final one is reached. The combination of possible states can
   generate a wide variety of events, thus defining a more complex
   production cycle. As a consequence, cycles are usually far to be simple
   linear sequences. There are commonly parallel branches running together
   and alternatives selected according to different events, schematically
   represented below:
   s:stage   c:condition

   s1
   |
   |-c2
   |
   s2
   |
   ----------
   |        |
   |-c31    |-c32
   |        |
  s31       s32
   |        |
   |-c41    |-c42
   |        |
   ----------
   |
   s4

Using object-oriented capabilities[edit]

   If the implementation language supports object-oriented programming, a
   simple refactoring is to encapsulate the automaton into an object, thus
   hiding its implementation details. For example, an object-oriented
   version in C++ of the same program is below. A more sophisticated
   refactoring could employ the State pattern.
#include <stdio.h>
class StateMachine {
    enum states { before = 0, inside = 1, after = 2 } state;
    struct branch {
        enum states new_state:2;
        int should_putchar:1;
    };
    static struct branch the_table[3][3];
public:
    StateMachine() : state(before) {}
    void FeedChar(int c) {
        int idx2 = (c == ' ') ? 0 : (c == '\n') ? 1 : 2;
        struct branch *b = & the_table[state][idx2];
        state = b->new_state;
        if(b->should_putchar) putchar(c);
    }
};
struct StateMachine::branch StateMachine::the_table[3][3] = {
                 /* ' '         '\n'        others */
    /* before */ { {before,0}, {before,1}, {inside,1} },
    /* inside */ { {after, 0}, {before,1}, {inside,1} },
    /* after  */ { {after, 0}, {before,1}, {after, 0} }
};
int main(void)
{
    int c;
    StateMachine machine;
    while((c = getchar()) != EOF)
        machine.FeedChar(c);
    return 0;
}

   Note: To minimize changes not directly related to the subject of the
   article, the input/output functions from the standard library of C are
   being used. Note the use of the ternary operator, which could also be
   implemented as if-else.

Applications[edit]

   Automata-based programming is widely used in lexical and syntactic
   analyses.^[1]

   Besides that, thinking in terms of automata (that is, breaking the
   execution process down to automaton steps and passing information from
   step to step through the explicit state) is necessary for event-driven
   programming as the only alternative to using parallel processes or
   threads.

   The notions of states and state machines are often used in the field of
   formal specification. For instance, UML-based software architecture
   development uses state diagrams to specify the behaviour of the
   program. Also various communication protocols are often specified using
   the explicit notion of state (see, e.g., RFC 793^[2]).

   Thinking in terms of automata (steps and states) can also be used to
   describe semantics of some programming languages. For example, the
   execution of a program written in the Refal language is described as a
   sequence of steps of a so-called abstract Refal machine; the state of
   the machine is a view (an arbitrary Refal expression without
   variables).

   Continuations in the Scheme language require thinking in terms of steps
   and states, although Scheme itself is in no way automata-related (it is
   recursive). To make it possible the call/cc feature to work,
   implementation needs to be able to catch a whole state of the executing
   program, which is only possible when there's no implicit part in the
   state. Such a caught state is the very thing called continuation, and
   it can be considered as the state of a (relatively complicated)
   automaton. The step of the automaton is deducing the next continuation
   from the previous one, and the execution process is the cycle of such
   steps.

   Alexander Ollongren in his book^[3] explains the so-called Vienna
   method of programming languages semantics description which is fully
   based on formal automata.

   The STAT system [1] is a good example of using the automata-based
   approach; this system, besides other features, includes an embedded
   language called STATL which is purely automata-oriented.

History[edit]

   Automata-based techniques were used widely in the domains where there
   are algorithms based on automata theory, such as formal language
   analyses.^[1]

   One of the early papers on this is by Johnson et al., 1968.^[4]

   One of the earliest mentions of automata-based programming as a general
   technique is found in the paper by Peter Naur, 1963.^[5] The author
   calls the technique Turing machine approach, however no real Turing
   machine is given in the paper; instead, the technique based on states
   and steps is described.

Compared against imperative and procedural programming[edit]

   The notion of state is not exclusive property of automata-based
   programming.^[6] Generally speaking, state (or program state) appears
   during execution of any computer program, as a combination of all
   information that can change during the execution. For instance, a state
   of a traditional imperative program consists of
    1. values of all variables and the information stored within dynamic
       memory
    2. values stored in registers
    3. stack contents (including local variables' values and return
       addresses)
    4. current value of the instruction pointer

   These can be divided to the explicit part (such as values stored in
   variables) and the implicit part (return addresses and the instruction
   pointer).

   Having said this, an automata-based program can be considered as a
   special case of an imperative program, in which implicit part of the
   state is minimized. The state of the whole program taken at the two
   distinct moments of entering the step code section can differ in the
   automaton state only. This simplifies the analysis of the program.

Object-oriented programming relationship[edit]

   In the theory of object-oriented programming an object is said to have
   an internal state and is capable of receiving messages, responding to
   them, sending messages to other objects and changing the internal state
   during message handling. In more practical terminology, to call an
   object's method is considered the same as to send a message to the
   object.

   Thus, on the one hand, objects from object-oriented programming can be
   considered as automata (or models of automata) whose state is the
   combination of internal fields, and one or more methods are considered
   to be the step. Such methods must not call each other nor themselves,
   neither directly nor indirectly, otherwise the object can not be
   considered to be implemented in an automata-based manner.

   On the other hand, it is obvious that object is good for implementing a
   model of an automaton. When the automata-based approach is used within
   an object-oriented language, an automaton model is usually implemented
   by a class, the state is represented with internal (private) fields of
   the class, and the step is implemented as a method; such a method is
   usually the only non-constant public method of the class (besides
   constructors and destructors). Other public methods could query the
   state but don't change it. All the secondary methods (such as
   particular state handlers) are usually hidden within the private part
   of the class.

See also[edit]

     * Nondeterministic programming
     * State pattern
     * Esterel, an automata-based language
     * Umple, a tool to add automata to Java and C++

References[edit]

    1. ^ ^a ^b Aho, Alfred V.; Ullman, Jeffrey D. (1973). The theory of
       parsing, translation and compiling 1. Englewood Cliffs, N. J.:
       Prentice-Hall. ISBN 0-13-914564-8.
    2. ^ RFC 793
    3. ^ Ollongren, Alexander (1974). Definition of programming languages
       by interpreting automata. London: Academic Press.
       ISBN 0-12-525750-3.
    4. ^ Johnson, W. L.; Porter, J. H.; Ackley, S. I.; Ross, D. T. (1968).
       "Automatic generation of efficient lexical processors using finite
       state techniques". Comm ACM 11 (12): 805–813.
       doi:10.1145/364175.364185.
    5. ^ Naur, Peter (September 1963). "The design of the GIER ALGOL
       compiler Part II". BIT Numerical Mathematics 3 (3): 145–166.
       doi:10.1007/BF01939983.
    6. ^ "Automata-based programming". Bulletin of St Petersburg State
       University of Information Technologies, Mechanics and Optics 53.
       2008. http://books.ifmo.ru/NTV/NTV_53.pdf (rus).  Check date values
       in: |date= (help)

External links[edit]

     * J. V. Noble. «Finite State Machines in Forth» — automata-based
       programming in Forth
     * Harel, David (1987). "Statecharts: A Visual Formalism for Complex
       Systems". Sci. Comput. Programming 8 (8): 231–274.
       doi:10.1016/0167-6423(87)90035-9.
     * Harel, David; Drusinsky, D. (1989). "Using Statecharts for Hardware
       Description and Synthesis". IEEE Trans. Computer Aided Design of
       Integrated Circuits and Systems (8): 798–807.
     * Polikarpova N. I., Shalyto A. A. Automata-based programming SPb.:
       Piter. 2009 (rus)


     * v
     * t
     * e

   Types of programming languages
     * Array
     * Aspect-oriented
     * Class-based
     * Concatenative
     * Concurrent
     * Data-structured
     * Dataflow
     * Declarative
     * Domain-specific
     * Dynamic
     * Esoteric
     * Event-driven
     * Extensible
     * Functional
     * Imperative
     * Logic
     * Macro
     * Metaprogramming
     * Multi-paradigm
     * Object-based
     * Object-oriented
     * Pipeline
     * Procedural
     * Prototype-based
     * Reflective
     * Rule-based
     * Scripting
     * Synchronous
     * Templating

     * Assembly
     * Compiled
     * Interpreted
     * Machine

     * Low-level
     * High-level
     * Very high-level

     * First generation
     * Second generation
     * Third generation
     * Fourth generation
     * Fifth generation

     * Non-English-based
     * Off-side rule
     * Visual

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Automata-based_programming&o
   ldid=620436826"
   Categories:
     * Programming paradigms

   Hidden categories:
     * CS1 errors: dates

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Português
     * Русский
     * Українська
     * 中文
     *

   Edit links

     * This page was last modified on 8 August 2014 at 23:41.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
