   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Comparison of programming languages

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
               Programming language comparisons
     * General comparison
     * Basic syntax
     * Basic instructions
     * Arrays
     * Associative arrays
     * String operations
     * String functions
     * List comprehension
     * Object-oriented programming
     * Object-oriented constructors
     * Database access

     * Evaluation strategy
     * List of "Hello World" programs

     * Web application frameworks
     * Comparison of the Java and .NET platforms

     * Comparison of individual programming languages
          + ALGOL 58's influence on ALGOL 60
          + ALGOL 60: Comparisons with other languages
          + Comparison of ALGOL 68 and C++
          + ALGOL 68: Comparisons with other languages
          + Compatibility of C and C++
          + Comparison of Pascal and Borland Delphi
          + Comparison of Object Pascal and C
          + Comparison of Pascal and C
          + Comparison of Java and C++
          + Comparison of C# and Java
          + Comparison of C# and Visual Basic .NET
          + Comparison of Visual Basic and Visual Basic .NET

     * v
     * t
     * e

   Programming languages are used for controlling the behavior of a
   machine (often a computer). Like natural languages, programming
   languages conform to rules for syntax and semantics.

   There are thousands of programming languages^[1] and new ones are
   created every year. Few languages ever become sufficiently popular that
   they are used by more than a few people, but professional programmers
   may use dozens of languages in a career.

Contents

     * 1 General comparison
     * 2 Type systems
     * 3 Failsafe I/O and system calls
     * 4 Expressiveness
     * 5 Benchmarks
     * 6 Timeline of specific language comparisons
     * 7 See also
     * 8 References
     * 9 Further reading
     * 10 External links

General comparison[edit]

   The following table compares general and technical information for a
   selection of commonly used programming languages. See the individual
   languages' articles for further information. Please note that the
   following table may be missing some information.
   Language Intended use Imperative Object-Oriented Functional Procedural
       Generic Reflective Event-Driven Other Paradigm(s) Standardized?
    ActionScript 3.0 Application, client-side, Web Yes Yes Yes 1996, ECMA
     Ada Application, embedded, realtime, system Yes Yes Yes^[2] Yes^[3]
    concurrent,^[4] distributed,^[5] imperative object-oriented^[6] 1983,
                  2005, 2012, ANSI, ISO, GOST 27831-88^[7]
       Aldor Highly domain-specific, symbolic computing Yes Yes Yes No
                         ALGOL 58 Application Yes No
             ALGOL 60 Application Yes 1960, IFIP WG 2.1, ISO^[8]
         ALGOL 68 Application Yes concurrent 1968, IFIP WG 2.1, GOST
                                27974-88,^[9]
              Ateji PX Parallel application Yes pi calculus No
      APL Application, data processing array-oriented, tacit 1989, ISO
    Assembly language General Yes any, syntax is usually highly specific,
                     related to the target processor No
      AutoHotkey GUI automation (macros), highly domain-specific Yes No
    AutoIt GUI automation (macros), highly domain-specific Yes Yes Yes No
            BASIC Application, education Yes Yes 1983, ANSI, ISO
                  BBj Application, business, Web Yes Yes No
   BeanShell Application, scripting Yes Yes Yes Yes In progress, JCP^[10]
                           BitC System Yes Yes No
                             BLISS System Yes No
                  BlitzMax Application, game Yes Yes Yes No
                             Boo Application No
                 Bro domain-specific, application Yes Yes No
    C Application, system,^[11] general purpose, low-level operations Yes
             Yes 1989, ANSI C89, ISO C90, ISO C99, ISO C11^[12]
   C++ Application, system Yes Yes Yes Yes Yes 1998, ISO/IEC 1998, ISO/IEC
                           2003, ISO/IEC 2011^[13]
    C# Application, RAD, business, client-side, general, server-side, Web
     Yes Yes Yes^[14] Yes Yes Yes Yes structured, concurrent 2000, ECMA,
                                  ISO^[15]
           Clarion General, business, Web Yes Yes Yes^[16] Unknown
                          Clean General Yes Yes No
                      Clojure General Yes concurrent No
                       CLU General Yes Yes Yes Yes No
    COBOL Application, business Yes Yes Yes ANSI X3.23 1968, 1974, 1985;
                        ISO/IEC 1989:1985, 2002, 2014
      Cobra Application, business, general, Web Yes Yes Yes Yes Yes No
                      ColdFusion (CFML) Web Yes Yes No
   Common Lisp General Yes Yes Yes Yes Yes Yes extensible syntax, syntatic
                    macros, multiple dispatch 1994, ANSI
   Language Intended use Imperative Object-Oriented Functional Procedural
       Generic Reflective Event-Driven Other Paradigm(s) Standardized?
                        COMAL 80 Education Yes Yes No
                   Crystal 1.0.0 Education Yes Yes Yes No
      Cython Application, general, numerical computing Yes Yes Yes Yes
                             aspect-oriented No
       D Application, system Yes Yes Yes Yes generative, concurrent No
         Dart Application, Web Yes Yes structured Ecma-408 standard
                        Dylan Application Yes Yes No
             Eiffel Application Yes Yes Yes 2005, ECMA, ISO^[17]
   Erlang Application, distributed, telecom Yes concurrent, distributed No
                       Euphoria Application Yes Yes No
                          Factor stack-oriented No
       Falcon General, Application Yes Yes Yes prototype OOP, message
                      oriented, tabular programming No
                                  FP Yes No
                      F# Application Yes Yes Yes Yes No
                 Forth General Yes stack-oriented 1994, ANSI
   Fortran Application, numerical computing Yes Yes Yes Yes 1966, ANSI 66,
    ANSI 77, MIL-STD-1753, ISO 90, ISO 95, ISO 2003, ISO/IEC 1539-1:2010
                                   (2008)
        FreeBASIC Application, numerical computing Yes Yes Yes Yes No
    G2 Application, inference, expert system Yes Yes Yes common graphical
                   development and runtime environment No
                      Gambas Application Yes Yes Yes No
            Game Maker Language Application, games Yes Yes Yes No
      GLBasic Application, games Yes Yes Yes simple object-oriented No
                  Go Application, system Yes concurrent No
        Gosu Application, general, scripting, Web Yes Yes Yes Yes No
                     GraphTalk Application Yes logic No
   Groovy Application, general, scripting, Web Yes Yes Yes aspect-oriented
                            In progress, JCP^[18]
    Harbour Application, business, data processing, general, Web Yes Yes
                       Yes Yes Yes Yes declarative No
     Haskell Application Yes Yes lazy evaluation 2010, Haskell 2010^[19]
            Haxe Application, general, Web Yes Yes Yes Yes Yes No
          HyperNext Application, education Yes Yes weakly typed No
      HyperTalk Application, RAD, General Yes Yes weakly typed Unknown
              Io Application, host-driven scripting Yes Yes No
   Language Intended use Imperative Object-Oriented Functional Procedural
       Generic Reflective Event-Driven Other Paradigm(s) Standardized?
                  ISLISP General Yes Yes Yes Yes 1997, ISO
         J Data processing array-oriented, function-level, tacit No
                  JADE Application, distributed Yes Yes No
   Java Application, business, client-side, general, server-side, Web Yes
         Yes Yes Yes concurrent De facto standard via Java Language
                                Specification
          JavaScript Client-side, Server-side, Web Yes Yes Yes Yes
                         prototype-based 1997, ECMA
                     Joy Research Yes stack-oriented No
          K Data processing, business array-oriented, tacit Unknown
   Kotlin Application, mobile development, server-sider, client-side, Web
             (JavaScript, HTML, CSS) Yes Yes Yes Yes Yes^[20] No
       LabVIEW (G) Application, industrial instrumentation-automation
                             dataflow, visual No
                          Lisp General Yes Unknown
         Livecode Application, RAD, General Yes Yes weakly typed No
      Logtalk Artificial intelligence, application Yes Yes Yes logic No
        Lua Application, embedded scripting Yes Yes^[21] Yes Yes Yes
                           aspect-oriented No^[22]
       Maple Symbolic computation, numerical computing Yes Yes Yes Yes
                               distributed No
     Mathematica Symbolic language Yes Yes Yes Yes logic, distributed No
      MATLAB Highly domain-specific, numerical computing Yes Yes Yes No
             Modula-2 Application, system Yes Yes 1996, ISO^[23]
                     Modula-3 Application Yes Yes Yes No
                    Oberon Application, system Yes Yes No
    Object Pascal (Delphi) Application, general, mobile App, Web Yes Yes
                        Yes Yes Yes Yes structured No
         Objective-C Application, general Yes Yes Yes concurrent No
            Occam General Yes Yes concurrent, process-oriented No
               Opa Web applications Yes Yes Yes distributed No
                     Oxygene Application Yes Yes Yes No
    Oz Application, distribution, education Yes Yes Yes concurrent, logic
                                     No
            Pascal Application, education Yes Yes 1983, ISO^[24]
                 Pawn Embedded, host-driven scripting Yes No
    Perl Application, scripting, text processing, Web Yes Yes Yes Yes Yes
                                   Yes No
     PHP Server-side, Web Application, Web Yes Yes^[25] Yes^[26] Yes No
                      PL/I Application Yes Yes Yes 1969
   Language Intended use Imperative Object-Oriented Functional Procedural
       Generic Reflective Event-Driven Other Paradigm(s) Standardized?
               Plus Application, system development Yes Yes No
         Prolog Application, artificial intelligence logic 1995, ISO
                        PureBasic Application Yes No
    Python Application, general, Web, scripting, AI, scientific computing
                     Yes Yes Yes Yes aspect-oriented No
    Racket Education, general, scripting Yes Yes Yes Yes modular, logic,
                                   meta No
                      REALbasic Application Yes Unknown
                 REBOL Distributed Yes Yes Yes dialected No
                   IBM RPG Application, system Yes Yes No
      Ruby Application, scripting, Web Yes Yes Yes Yes aspect-oriented
                    2011(JIS X 3017), 2012(ISO/IEC 30170)
         Rust Application, system Yes Yes Yes Yes Yes concurrent No
                S Application, statistics Yes Yes Yes Yes No
             S-Lang Application, numerical, scripting Yes Yes No
    Scala Application, distributed, Web Yes Yes Yes Yes Yes Yes De facto
               standard via Scala Language Specification (SLS)
                  Scheme Education, general Yes 1998, R^6RS
         Seed7 Application, general, scripting, Web Yes Yes Yes Yes
                  multi-paradigm, extensible, structured No
      Simula Education, general Yes Yes Yes discrete event simulation,
           multi-threaded (quasi-parallel) program execution 1968
   Small Basic Application, education, games Yes Yes component-oriented No
    Smalltalk Application, education Yes Yes Yes concurrent, declarative
                                 1998, ANSI
                       SNOBOL Text processing Unknown
           Standard ML Application Yes Yes Yes 1997, SML '97^[27]
          Swift Application, general Yes Yes Yes Yes concurrent No
             Tcl Application, scripting, Web Yes Yes Yes Yes No
   Visual Basic Application, RAD, education, business, general, (Includes
          VBA), office automation Yes Yes Yes component-oriented No
    Visual Basic .NET Application, RAD, education, Web, business, general
                           Yes Yes Yes Yes Yes No
            Visual FoxPro Application Yes data-centric, logic No
       Visual Prolog Application Yes Yes Yes Yes declarative, logic No
        Windows PowerShell Administration Yes Yes Yes Yes pipeline No
                      XL Yes Yes concept programming No
         Xojo Application, RAD, General, Web Yes Yes Yes Yes Yes No
   Language Intended use Imperative Object-Oriented Functional Procedural
   Generic Reflective Event-Driven Other Paradigm(s) Standardized?

Type systems[edit]

   Brief definitions
     * A nominal type system means that the language decides whether types
       are compatible and/or equivalent based on explicit declarations and
       names.
     * A structural type system means that the language decides whether
       types are compatible and/or equivalent based on the definition and
       characteristics of the types.
     * Type checking determines whether and when types are verified.
       Static checking means that type errors are reported based on a
       program's text (source code). Dynamic checking means that type
       errors are reported based on a program's dynamic (run-time)
       behavior..

   Language Type safety Type expression Type compatibility and equivalence
   Type checking
   ActionScript 3.0 safe implicit with optional explicit typing static
   Ada safe^[TS 1] explicit nominal static
   Aldor unsafe implicit static
   ALGOL 58 safe explicit static
   ALGOL 60 safe explicit static
   ALGOL 68 safe explicit structural static & tagged unions
   APL safe dynamic
   AutoHotkey typeless n/a n/a n/a
   Ateji PX safe explicit nominal static
   BASIC safe explicit nominal static
   BLISS typeless n/a n/a n/a
   BeanShell safe nominal dynamic
   Boo safe implicit with optional explicit typing static with optional
   dynamic typing
   Bro safe implicit with optional explicit typing nominal static
   C unsafe explicit nominal static
   C++ (ISO/IEC 14882) unsafe explicit nominal static^[TS 2]
   C# unsafe^[TS 3] implicit with optional explicit typing nominal
   static^[TS 4]
   Clean safe implicit static
   Clojure safe implicit with optional explicit typing dynamic
   COBOL safe explicit nominal static
   ColdFusion (CFML) safe implicit dynamic
   Common Lisp safe implicit with optional explicit typing dynamic
   Curl safe nominal
   Cython safe implicit with optional explicit typing nominal (extension
   types) and structural (Python) dynamic with optional static typing
   D unsafe^[TS 3] explicit nominal static
   Dylan safe dynamic
   Dynace safe implicit dynamic
   Eiffel safe nominal static
   Erlang safe implicit dynamic
   Euphoria safe explicit, implicit with objects nominal static, dynamic
   with objects
   F# safe implicit nominal static
   Falcon safe implicit structural dynamic
   Forth typeless n/a n/a n/a
   Fortran safe explicit^[TS 5] nominal static
   Gambas safe explicit nominal
   GLBasic safe explicit. Non-explicit declarations available through
   project options nominal static
   Go^[28] safe implicit with optional explicit typing structural static
   Gosu safe partially implicit (local type inference) nominal
   (subclassing) and structural (structural) static
   Groovy safe implicit with optional explicit typing dynamic with
   optional static typing
   Harbour safe implicit with optional explicit typing dynamic
   Haskell safe implicit with optional explicit typing structural static
   Haxe safe implicit with optional explicit typing nominal (subclassing)
   and structural (structural) static with optional dynamic typing
   Io safe implicit dynamic
   ISLISP safe dynamic
   J safe dynamic
   Java safe^[29] explicit nominal static
   JavaScript safe implicit structural dynamic
   Joy safe dynamic
   Kotlin safe partially implicit (local type inference) nominal static
   LabVIEW safe
   Lua safe implicit dynamic
   Maple safe dynamic
   Mathematica safe dynamic
   MATLAB M-code safe dynamic
   Modula-2 unsafe^[TS 3] explicit nominal static
   Modula-3 unsafe^[TS 3] explicit structural static
   Oberon safe explicit nominal static and partially dynamic^[TS 6]
   Objective-C safe explicit nominal dynamic with optional static
   typing^[30]
   OCaml safe implicit with optional explicit typing structural static
   Object Pascal (Delphi) safe explicit nominal static
   Opa safe implicit with optional explicit typing structural static
   Oxygene unsafe implicit static
   Oz safe implicit structural dynamic
   Pascal unsafe^[TS 3] explicit nominal static
   Perl 5 implicit dynamic
   Perl 6 partially implicit^[TS 7] dynamic with optional static typing
   PHP implicit dynamic
   Plus safe explicit structural static, dynamic (optional)
   Prolog dynamic
   Pure dynamic
   Python safe implicit structural dynamic
   REBOL safe implicit dynamic
   IBM RPG unsafe static
   Ruby safe implicit structural dynamic
   Rust safe implicit with optional explicit typing static with optional
   dynamic typing
   S dynamic
   S-Lang safe implicit dynamic
   Scala safe partially implicit (local type inference) nominal
   (subclassing) and structural (structural) static
   Scheme safe implicit dynamic (latent)
   Seed7 safe explicit nominal static
   Simula safe static^[TS 8]
   Smalltalk safe implicit dynamic
   Standard ML safe implicit with optional explicit typing structural
   static
   Tcl dynamic
   Visual Basic safe implicit with optional explicit typing nominal static
   Visual Basic .NET unsafe^[TS 3] explicit static
   Visual Prolog safe partially implicit nominal static
   Windows PowerShell safe implicit dynamic
   XL safe nominal static
   Xojo safe explicit nominal static
   Language Type safety Type expression Type compatibility among
   composites Type checking
    1. ^ Unsafe operations are well isolated by a "Unchecked_" prefix.
    2. ^ with optional dynamic type casting (see dynamic cast)
    3. ^ ^a ^b ^c ^d ^e ^f It is almost safe, unsafe features are not
       commonly used.
    4. ^ with optional dynamic type (see dynamic member lookup)
    5. ^ Optionally, typing can be explicitly implied by the first letter
       of the identifier (known as implicit typing within the Fortran
       community).
    6. ^ dynamic checking of type extensions i.e. inherited types
    7. ^ explicit for static types
    8. ^ optional for formal and virtual procedures

Failsafe I/O and system calls[edit]

   Most programming languages will print an error message and/or throw an
   exception if an input/output operation or other system call (e.g.,
   chmod, kill) fails, unless the programmer has explicitly arranged for
   different handling of these events. Thus, these languages fail safely
   in this regard.

   Some (mostly older) languages require that the programmer explicitly
   add checks for these kinds of errors. Psychologically, different
   cognitive biases (e.g., optimism bias) may affect novice and experts
   alike and these omissions can lead to erroneous behavior.
   Language Failsafe I/O
   Ada Yes (exceptions)
   ALGOL Yes (exceptions or return value depending on function)
   AutoHotkey No (global ErrorLevel must be explicitly checked)
   Bro Yes
   C No^[FSIO 1]
   C++ No^[FSIO 2]
   C# Yes
   COBOL No
   Common Lisp Yes
   D Yes^[citation needed]
   Eiffel No – It actually depends on the library and it is not defined by
   the language
   Erlang Yes
   Falcon Yes
   Fortran Yes
   GLBasic No – Will generally cause program to crash
   Go No
   Gosu Yes
   Harbour Yes
   Haskell Yes
   ISLISP Yes
   Java Yes
   Kotlin Yes
   LabVIEW Yes
   Lua No (some functions do not warn or throw exceptions)
   Mathematica Yes
   Object Pascal (Delphi) Some
   Objective-C Yes (exceptions)
   OCaml Yes (exceptions)
   Perl No^[FSIO 3]
   PHP Yes
   Python Yes
   REBOL Yes
   Ruby Yes
   Rust Yes
   S Unknown
   Scala Yes^[31]
   Standard ML Yes^[citation needed]
   Tcl Yes
   Visual Basic Yes
   Visual Prolog Yes
   Xojo Yes
   Language Failsafe I/O
    1. ^ gcc can warn on unchecked error status. Newer versions of Visual
       Studio usually throw exceptions on failed I/O when using stdio.
    2. ^ g++ can warn on unchecked error status. Newer versions of Visual
       Studio usually throw exceptions on failed I/O when using stdio.
    3. ^ Considerable error checking can be enabled optionally, but by
       default Perl is not failsafe.

Expressiveness[edit]

   Language  Statements ratio^[32] Lines ratio^[33]
   C         1                     1
   C++       2.5                   1
   Fortran   2                     0.8
   Java      2.5                   1.5
   Perl      6                     6
   Smalltalk 6                     6.25
   Python    6                     6.5

   The literature on programming languages contains an abundance of
   informal claims about their relative expressive power, but there is no
   framework for formalizing such statements nor for deriving interesting
   consequences.^[34] This table provides two measures of expressiveness
   from two different sources. An additional measure of expressiveness, in
   GZip bytes, can be found on the Computer Language Benchmarks Game.^[35]

   The same concepts applied to measuring the expressiveness of computer
   programming languages can be applied to markup languages like
   HTML.^[36]

Benchmarks[edit]

   Benchmarks are designed to mimic a particular type of workload on a
   component or system. The computer programs used for compiling some of
   the benchmark data in this section may not have been fully optimized,
   and the relevance of the data is disputed. The most accurate benchmarks
   are those that are customized to your particular situation. Other
   people's benchmark data may have some value to others, but proper
   interpretation brings many challenges. The Computer Language Benchmarks
   Game site warns against over-generalizing from benchmark data, but
   contains a large number of micro-benchmarks of reader-contributed code
   snippets, with an interface that generates various charts and tables
   comparing specific programming languages and types of tests.

Timeline of specific language comparisons[edit]

     * 1973 – Comparative Notes on Algol 68 and PL/I – S. H. Valentine –
       February 1973
     * 1976 – Evaluation of ALGOL 68, JOVIAL J3B, Pascal, Simula 67, and
       TACPOL Versus TINMAN – Requirements for a Common High Order
       Programming Language.
     * 1977 – A comparison of PASCAL and ALGOL 68^[37] – Andrew S.
       Tanenbaum – June 1977.
     * 1993 – Five Little Languages and How They Grew – BLISS, Pascal,
       ALGOL 68, BCPL & C – Dennis M. Ritchie – April 1993.
     * 2009 – On Go – oh, go on – How well will Google's Go stand up
       against Brand X programming language? – David Given – November 2009

See also[edit]

     * Alphabetical list of programming languages
     * Comparison of basic instructions of programming languages
     * Comparison of programming languages (string functions)
     * Comparison of programming languages (strings)
     * Comparison of programming languages (syntax)
     * Comparison of programming languages (array)
     * Comparison of programming languages (object-oriented programming)
     * Comparison of programming languages (list comprehension)
     * Comparison of programming languages (mapping)
     * Comparison of programming paradigms
     * Comparison of multi-paradigm programming languages
     * Comparison of type systems
     * Educational programming language
     * Hello world program examples
     * Measuring programming language popularity
     * Programming language

References[edit]

    1. ^ As of May 2006 Diarmuid Pigott's Encyclopedia of Computer
       Languages hosted at Murdoch University, Australia lists 8512
       computer languages.
    2. ^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 6:
       Subprograms
    3. ^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 12:
       Generic Units
    4. ^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, Section 9:
       Tasks and Synchronization
    5. ^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3 Annex E:
       Distributed Systems
    6. ^ Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3, 3.9 Tagged
       Types and Type Extensions
    7. ^ Vak.ru
    8. ^ ISO 1538:1984
    9. ^ Vak.ru
   10. ^ JSR 274
   11. ^ CM.bell-labs.com
   12. ^ ANSI C89, ISO/IEC 9899:1990, 1999, 2011
   13. ^ ISO/IEC 14882:1998, 2003, 2011
   14. ^ Codeproject.com: Functional Programming in C# 3.0 using Lambda
       Expression
   15. ^ ECMA-334; ISO/IEC 23270:2006
   16. ^ Softvelocity.com
   17. ^ ECMA-367; ISO/IEC 25436:2006
   18. ^ JSR 241
   19. ^ "The Haskell 2010 Language Report". Retrieved 2011-12-07.  Most
       Haskell implementations extend the Haskell 2010 standard.
   20. ^ "M8 is out!". "As a first peek into the future reflective
       capabilities of Kotlin, you can now access properties as
       first-class objects in Kotlin"
   21. ^ Lua doesn't have explicit "object" type (more general type of
       "table" is used for object definition), but does have explicit
       syntax for object method calling
   22. ^ Version releases are accompanied with a definitive Lua Reference
       Manual showing full syntax and semantics; a reference
       implementation, and a test suite. These are used to generate other
       Lua VM implementations and compilers such as Kahlua and LLVM-Lua.
   23. ^ ISO/IEC 10514-1:1996
   24. ^ ISO 7185
   25. ^ PHP Manual, Chapter 19. Classes and Objects (PHP 5),
   26. ^ PHP Manual, Chapter 17. Functions
   27. ^ SMLNJ.org
   28. ^ The Go Programming Language Specification
   29. ^ Sheng Liang, Gilad Bracha. Dynamic class loading in the Java
       virtual machine. Volume 33, Issue 10 of ACM SIGPLAN Notices,
       October 1998.
   30. ^ Developer.apple.com
   31. ^ Scala runs on the Java Virtual Machine from which it inherits the
       runtime exception handling.
   32. ^ Data from Code Complete, p. 100. The Statements ratio column
       "shows typical ratios of source statements in several high-level
       languages to the equivalent code in C. A higher ratio means that
       each line of code in the language listed accomplishes more than
       does each line of code in C.
   33. ^ The ratio of line count tests won by each language to the number
       won by C when using the Compare to feature at
       benchmarksgame.alioth.debian.org. Last updated May, 2006. C gcc was
       used for C, C++ g++ was used for C++, FORTRAN G95 was used for
       FORTRAN, Java JDK Server was used for Java, and Smalltalk GST was
       used for Smalltalk.
   34. ^ Felleisen, Matthias. "On the Expressive Power of Programming
       Languages". ESOP '90 3rd European Symposium on Programming.
       CiteSeerX: 10.1.1.51.4656.
   35. ^ Computer Language Benchmarks Game ranking
   36. ^ Marceau, Guillaume (2009-05-30). "Guillaume Marceau: The speed,
       size and dependability of programming languages".
       Blog.gmarceau.qc.ca. Retrieved 2013-06-14.
   37. ^ http://dare.ubvu.vu.nl/bitstream/1871/2609/1/11054.pdf

Further reading[edit]

     * Cezzar, Ruknet. A Guide to Programming Languages: Overview and
       Comparison. ISBN 978-0-89006-812-0.

External links[edit]

     * 99-bottles-of-beer.net — one program in over a thousand variations
       and multiple languages.
     * The speed, size and dependability of programming languages — charts
       and narrative based on The Computer Language Benchmarks Game data.
     * Shapes: Source Code Size and Run Time - charts based on current
       Benchmarks Game data.
     * Comparison of syntaxes with sample codes.
     * Syntax Across Languages
     * Scriptometer scores — multiple comparisons of 26 programming
       languages.
     * PLEAC — Programming Language Examples Alike Cookbook.
     * OHLOH Language Statistics — gives an indication of the popularity
       of programming languages in open-source projects.
     * History of Programming Language Statements — history and comparison
       of programming languages.
     * Rosetta Code — a programming language comparison wiki

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Comparison_of_programming_la
   nguages&oldid=622368787"
   Categories:
     * Programming language comparisons

   Hidden categories:
     * All articles with unsourced statements
     * Articles with unsourced statements from February 2011

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * 한국어
     * हिन्दी
     * Bahasa Melayu
     * 日本語
     * Português
     * Русский
     * Українська
     *

   Edit links

     * This page was last modified on 22 August 2014 at 18:16.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
