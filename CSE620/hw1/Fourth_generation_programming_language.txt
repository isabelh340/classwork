   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Fourth-generation programming language

   From Wikipedia, the free encyclopedia
     (Redirected from Fourth generation programming language)
   Jump to: navigation, search

    This article has multiple issues. Please help improve it or discuss
   these issues on the talk page.

   This article may be confusing or unclear to readers. Please help us
   clarify the article; suggestions may be found on the talk page.
   (December 2012)

   This article may be too technical for most readers to understand.
   Please help improve this article to make it understandable to
   non-experts, without removing the technical details. The talk page may
   contain suggestions. (December 2012)

   A fourth-generation programming language (4GL) is a computer
   programming language envisioned as a refinement of the style of
   languages classified as third-generation programming language (3GL).
   Each of the programming language generations aims to provide a higher
   level of abstraction of the internal computer hardware details, making
   the language more programmer-friendly, powerful and versatile. While
   the definition of 4GL has changed over time, it can be typified by
   operating more with large collections of information at once rather
   than focus on just bits and bytes. Languages claimed to be 4GL may
   include support for database management, report generation,
   mathematical optimization, GUI development, or web development.
   Fourth-generation languages have often been compared to domain-specific
   languages (DSLs). Some researchers state that 4GLs are a subset of
   DSLs.^[1]^[2]

   The concept of 4GL was developed from the 1970s through the 1990s,
   overlapping most of the development of 3GL. While 3GLs like C, C++, C#,
   Java, and JavaScript remain popular for a wide variety of uses, 4GLs as
   originally defined found narrower uses. Some advanced 3GLs like Python,
   Ruby, and Perl combine some 4GL abilities within a general-purpose 3GL
   environment. Also, libraries with 4GL-like features have been developed
   as add-ons for most popular 3GLs. This has blurred the distinction of
   4GL and 3GL.

   In the 1980s and 1990s, there were efforts to develop fifth-generation
   programming languages (5GL).

Contents

     * 1 History
     * 2 Types
     * 3 Examples
     * 4 See also
     * 5 References
     * 6 External links

History[edit]

   Though used earlier in papers and discussions, the term 4GL was first
   used formally by James Martin in his 1982 book Applications Development
   Without Programmers^[3] to refer to non-procedural, high-level
   specification languages. In some primitive way, early 4GL's were
   included in the Informatics MARK-IV (1967) product and Sperry's MAPPER
   (1969 internal use, 1979 release).

   The motivations for the '4GL' inception and continued interest are
   several. The term can apply to a large set of software products. It can
   also apply to an approach that looks for greater semantic properties
   and implementation power. Just as the 3GL offered greater power to the
   programmer, so too did the 4GL open up the development environment to a
   wider population.

   In a sense, the 4GL is an example of 'black box' processing, each
   generation (in the sense of the page) is further from the machine (see
   the Computer Science history in regard to data structure improvements
   and information hiding). It is this latter nature that is directly
   associated with 4GL having errors that are harder, in many cases, to
   debug. In terms of applications, a 4GL could be business oriented or it
   could deal with some technical domain. Being further from the machine
   implies being closer to domain. Given the wide disparity of concepts
   and methods across domains, 4GL limitations lead to recognition of the
   need for the 5GL.^[original research?]

   The early input scheme for the 4GL supported entry of data within the
   72-character limit of the punched card (8 bytes used for sequencing)
   where a card's tag would identify the type or function. With judicious
   use of a few cards, the 4GL deck could offer a wide variety of
   processing and reporting capability whereas the equivalent
   functionality coded in a 3GL could subsume, perhaps, a whole box or
   more of cards.^[4]

   The 72-character metaphor continued for a while as hardware progressed
   to larger memory and terminal interfaces. Even with its limitations,
   this approach supported highly sophisticated applications.

   As interfaces improved and allowed longer statement lengths and
   grammar-driven input handling, greater power ensued. An example of this
   is described on the Nomad page.

                Another example of Nomad's power is illustrated by
                Nicholas Rawlings in his comments for the Computer History
                Museum about NCSS (see citation below). He reports that
                James Martin asked Rawlings for a Nomad solution to a
                standard problem Martin called the Engineer's Problem:
                "give 6% raises to engineers whose job ratings had an
                average of 7 or better." Martin provided a "dozen pages of
                COBOL, and then just a page or two of Mark IV, from
                Informatics." Rawlings offered the following single
                statement, performing a set-at-a-time operation...

   The development of the 4GL was influenced by several factors, with the
   hardware and operating system constraints having a large weight. When
   the 4GL was first introduced, a disparate mix of hardware and operating
   systems mandated custom application development support that was
   specific to the system in order to ensure sales. One example is the
   MAPPER system developed by Sperry. Though it has roots back to the
   beginning, the system has proven successful in many applications and
   has been ported to modern platforms. The latest variant is embedded in
   the BIS^[5] offering of Unisys. MARK-IV is now known as VISION:BUILDER
   and is offered by Computer Associates.

   Santa Fe railroad used MAPPER to develop a system, in a project that
   was an early example of 4GL, rapid prototyping, and programming by
   users.^[6] The idea was that it was easier to teach railroad experts to
   use MAPPER than to teach programmers the "intricacies of railroad
   operations".^[7]

   One of the early (and portable) languages that had 4GL properties was
   Ramis developed by Gerald C. Cohen at Mathematica, a mathematical
   software company. Cohen left Mathematica and founded Information
   Builders to create a similar reporting-oriented 4GL, called FOCUS.

   Later 4GL types are tied to a database system and are far different
   from the earlier types in their use of techniques and resources that
   have resulted from the general improvement of computing with time.

   An interesting twist to the 4GL scene is realization that graphical
   interfaces and the related reasoning done by the user form a 'language'
   that is poorly understood.

Types[edit]

   A number of different types of 4GLs exist:
     * Table-driven (codeless) programming, usually running with a runtime
       framework and libraries. Instead of using code, the developer
       defines his logic by selecting an operation in a pre-defined list
       of memory or data table manipulation commands. In other words,
       instead of coding, the developer uses Table-driven algorithm
       programming (See also control tables that can be used for this
       purpose). A good example of this type of 4GL language is
       PowerBuilder. These types of tools can be used for business
       application development usually consisting in a package allowing
       for both business data manipulation and reporting, therefore they
       come with GUI screens and report editors. They usually offer
       integration with lower level DLLs generated from a typical 3GL for
       when the need arise for more hardware/OS specific operations.
     * Report-generator programming languages take a description of the
       data format and the report to generate and from that they either
       generate the required report directly or they generate a program to
       generate the report. See also RPG
     * Similarly, forms generators manage online interactions with the
       application system users or generate programs to do so.
     * More ambitious 4GLs (sometimes termed fourth generation
       environments) attempt to automatically generate whole systems from
       the outputs of CASE tools, specifications of screens and reports,
       and possibly also the specification of some additional processing
       logic.
     * Data management 4GLs such as SAS, SPSS and Stata provide
       sophisticated coding commands for data manipulation, file
       reshaping, case selection and data documentation in the preparation
       of data for statistical analysis and reporting.

   Some 4GLs have integrated tools which allow for the easy specification
   of all the required information:
     * James Martin's version of Information Engineering systems
       development methodology was automated to allow the input of the
       results of system analysis and design in the form of data flow
       diagrams, entity relationship diagrams, entity life history
       diagrams etc. from which hundreds of thousands of lines of COBOL
       would be generated overnight.
     * More recently Oracle Corporation's Oracle Designer and Oracle
       Developer Suite 4GL products could be integrated to produce
       database definitions and the forms and reports programs.

Examples[edit]

   General use / versatile
     * Clarion
     * Clipper
     * CA-Telon 4GL Cobol/PLI generator
     * Cognos PowerHouse 4GL
     * DataFlex
     * Fort√© TOOL (transactional object-oriented language)
     * FORTH
     * FOCUS from Information Builders Inc.
     * FoxPro
     * GeneXus (Knowledge-based Multi-Platform Development Tool)
     * IBM Rational EGL (Enterprise Generation Language)
     * LabVIEW
     * LINC
     * Omnis Studio SDK
     * OutSystems (Productivity/PaaS)
     * Panther
     * PowerBuilder
     * Perl
     * Python
     * Ruby
     * Oracle Application Development Framework
     * DEC RALLY
     * SheerPower4GL (Microsoft Windows only)
     * SQLWindows/Team Developer
     * Uniface
     * Visual DataFlex (Microsoft Windows only)
     * WinDev
     * Unix Shell
     * XBase++
     * Manage (SDS Sigma series mainframes)

   Database query languages
     * FOCUS
     * 4D QL
     * Informix-4GL
     * OpenEdge ABL
     * Ingres 4GL
     * Ramis
     * SQL

   Report generators
     * BuildProfessional
     * LIRC
     * NATURAL
     * Oracle Reports
     * Progress 4GL Query/Results
     * Quest
     * RPG-II

   Data manipulation, analysis, and reporting languages
     * Ab Initio
     * ABAP
     * Aubit-4GL
     * Audit Command Language
     * Clarion Programming Language
     * CorVision
     * Culprit
     * ADS/Online (plus transaction processing)
     * Easytrieve
     * FOCUS
     * GraphTalk
     * IDL
     * IGOR Pro
     * Informix-4GL
     * LANSA
     * LabVIEW
     * MANTIS
     * MAPPER (Unisys/Sperry) now part of BIS
     * MARK-IV (Sterling/Informatics) now VISION:BUILDER of CA
     * Mathematica
     * Simulink a component of MATLAB
     * NATURAL
     * Nomad
     * PL/SQL
     * Progress 4GL
     * PROIV
     * R
     * Ramis
     * S
     * Scilab
     * SAS
     * SPSS
     * SQL PL
     * Stata
     * Synon
     * XBase++
     * SQR
     * Xquery Backward compatible with SQL and forward compatible with XML
       data sources.

   GUI creators
     * 4th Dimension (Software)
     * MATLAB's GUIDE
     * Omnis Studio
     * OpenROAD
     * Progress 4GL AppBuilder
     * Revolution
     * XUL Can be used with Xquery to create web GUI database applications
       quickly.
     * Visual DataFlex

   Mathematical optimization
     * AIMMS
     * AMPL
     * GAMS

   Database-driven GUI application development
     * Action Request System
     * C/AL
     * Genexus
     * SB+/SystemBuilder
     * Progress Dynamics

   Screen painters and generators
     * SB+/SystemBuilder
     * Oracle Forms
     * Progress 4GL ProVision

   Web development languages
     * ActiveVFP
     * CFML
     * Wavemaker open source, browser-based development platform for Ajax
       development based on Dojo, Spring, Hibernate
     * OutSystems

See also[edit]

     * Domain-specific programming language
     * Rapid application development
     * Fifth-generation programming language

References[edit]

    1. ^ 35th Hawaii International Conference on System Sciences - 1002
       Domain-Specific Languages for Software Engineering
    2. ^ Arie van Deursen; Paul Klint; Joost Visser (1998).
       "Domain-Specific Languages:An Annotated Bibliography". Retrieved
       2009-03-15.
    3. ^ Martin, James. Application Development Without Programmers.
       Prentice-Hall, 1981. ISBN 0-13-038943-9.
    4. ^ Columbia University Computing History: IBM Cards
    5. ^ Unisys. Business Information Server (BIS).
    6. ^ Louis Schlueter, User-Designed Computing: The Next Generation,
       1988. [book on report generator and MAPPER systems]
    7. ^ McNurlin & Sprague. Technologies for Developing Systems
       Information Systems Management in Practice. Prentice Hall, 2003.
       ISBN 0-13-101139-1

External links[edit]

     * FourGen CASE Tools - Rapid Application Development Environment
     * Four J's Development Tools Genero, Genero Studio
     * IBM Informix Genero
     * 4GL GPL/GNU OpenSource development tools project
     * Domain-Specific Languages for Software Engineering (Compares 4GLs
       to DSLs)
     * The fourgen site.
     * The Gillani fourgen site.
     * Up ! 5GL to consolidate or to build component-based applications.

   This article is based on material taken from the Free On-line
   Dictionary of Computing prior to 1 November 2008 and incorporated under
   the "relicensing" terms of the GFDL, version 1.3 or later.

     * v
     * t
     * e

   Programming language generations
     * Generations Overview
          + 1GL
          + 2GL
          + 3GL
          + 4GL
          + 5GL


     * v
     * t
     * e

   Types of computer languages
     * Architecture description
     * Hardware description
     * Markup
     * Modeling
     * Programming language
     * Query
     * Specification
     * Stylesheet
     * Template processing
     * Transformation

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Fourth-generation_programmin
   g_language&oldid=624861815"
   Categories:
     * Programming language classification
     * 4GL

   Hidden categories:
     * Wikipedia articles needing clarification from December 2012
     * All Wikipedia articles needing clarification
     * Wikipedia articles that are too technical from December 2012
     * All articles that are too technical
     * Articles needing expert attention from December 2012
     * All articles needing expert attention
     * All articles that may contain original research
     * Articles that may contain original research from May 2008

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
     * Bosanski
     * Deutsch
     * Espa√±ol
     * ŸÅÿßÿ±ÿ≥€å
     * Fran√ßais
     * ÌïúÍµ≠Ïñ¥
     * Italiano
     * ◊¢◊ë◊®◊ô◊™
     * Bahasa Melayu
     * Nederlands
     * Êó•Êú¨Ë™û
     * Polski
     * Portugu√™s
     * Sloven≈°ƒçina
     * ‰∏≠Êñá
     *

   Edit links

     * This page was last modified on 9 September 2014 at 21:44.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia¬Æ is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
