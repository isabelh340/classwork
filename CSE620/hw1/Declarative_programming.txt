   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Declarative programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search

    This article has multiple issues. Please help improve it or discuss
   these issues on the talk page.

   This article includes a list of references, but its sources remain
   unclear because it has insufficient inline citations. Please help to
   improve this article by introducing more precise citations. (April
   2010)

   This article uses bare URLs for citations, which may be threatened by
   link rot. Please consider adding full citations so that the article
   remains verifiable. Several templates are available to assist in
   formatting. (August 2013)
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   In computer science, declarative programming is a programming paradigm,
   a style of building the structure and elements of computer programs,
   that expresses the logic of a computation without describing its
   control flow.^[1] Many languages applying this style attempt to
   minimize or eliminate side effects by describing what the program
   should accomplish in terms of the problem domain, rather than
   describing how to go about accomplishing it as a sequence of the
   programming language primitives^[2] (the how is left up to the
   language's implementation). This is in contrast with imperative
   programming, in which algorithms are implemented in terms of explicit
   steps.

   Declarative programming often considers programs as theories of a
   formal logic, and computations as deductions in that logic space.
   Declarative programming may greatly simplify writing parallel
   programs.^[3]

   Common declarative languages include those of database query languages
   (e.g., SQL, XQuery), regular expressions, logic programming, functional
   programming, and configuration management systems.

Contents

     * 1 Definition
     * 2 Subparadigms
          + 2.1 Constraint programming
          + 2.2 Domain-specific languages
          + 2.3 Functional programming
          + 2.4 Hybrid languages
          + 2.5 Logic programming
          + 2.6 Modeling
     * 3 See also
     * 4 References
     * 5 External links

Definition[edit]

   Declarative programming is often defined as any style of programming
   that is not imperative. A number of other common definitions exist that
   attempt to give the term a definition other than simply contrasting it
   with imperative programming. For example:
     * A program that describes what computation should be performed and
       not how to compute it
     * Any programming language that lacks side effects (or more
       specifically, is referentially transparent)
     * A language with a clear correspondence to mathematical logic.^[4]

   These definitions overlap substantially.

   Declarative programming contrasts with imperative and procedural
   programming. Declarative programming is a non-imperative style of
   programming in which programs describe their desired results without
   explicitly listing commands or steps that must be performed. Functional
   and logical programming languages are characterized by a declarative
   programming style. In logical programming languages, programs consist
   of logical statements, and the program executes by searching for proofs
   of the statements.

   In a pure functional language, such as Haskell, all functions are
   without side effects, and state changes are only represented as
   functions that transform the state. Although pure functional languages
   are non-imperative, they often provide a facility for describing the
   effect of a function as a series of steps. Other functional languages,
   such as Lisp, OCaml and Erlang, support a mixture of procedural and
   functional programming.

   Some logical programming languages, such as Prolog, and database query
   languages, such as SQL, while declarative in principle, also support a
   procedural style of programming.

Subparadigms[edit]

   Declarative programming is an umbrella term that includes a number of
   better-known programming paradigms.

Constraint programming[edit]

   In constraint programming, relations between variables are stated in
   the form of constraints, specifying the properties of a solution to be
   found. The set of constraints is then solved by giving a value to each
   variable so that the solution is consistent with the maximum number of
   constraints.

   Constraint programming is often used as a complement to other
   paradigms: functional, logical or even imperative programming.

Domain-specific languages[edit]

   Some well-known examples of declarative domain-specific languages
   (DSLs) include the yacc parser generator input language, the Make build
   specification language, Puppet's configuration management language,
   regular expressions, and a subset of SQL (SELECT queries, for example).
   DSLs have the advantage of being useful while not necessarily needing
   to be Turing-complete, which makes it easier for a language to be
   purely declarative.

   Many markup languages such as HTML, MXML, XAML, XSLT or other
   user-interface markup languages are often declarative. HTML, for
   example, only describes what should appear on a webpage - it does not
   specify the possible interactions with that webpage.

   As of 2013^[update] some software systems combine traditional
   user-interface markup languages (such as HTML) with declarative markup
   that defines what (but not how) the back-end server systems should do
   to support the declared interface. Such systems, typically using a
   domain-specific XML namespace, may include abstractions of SQL database
   syntax or parameterised calls to web services using representational
   state transfer (REST) and SOAP.

Functional programming[edit]

   Functional programming, and in particular purely functional
   programming, attempts to minimize or eliminate side effects, and is
   therefore considered declarative. Most functional languages, such as
   Scheme, Clojure, Haskell, OCaml, Standard ML, and Unlambda, however, do
   permit side effects in practice.

   While functional languages typically do appear to specify "how", a
   compiler for a purely functional programming language is free to
   extensively rewrite the operational behavior of a function, so long as
   the same result is returned for the same inputs. This can be used to,
   for example, make a function compute its result in parallel, or to
   perform substantial optimizations (such as deforestation) that a
   compiler may not be able to safely apply to a language with side
   effects.

Hybrid languages[edit]

   See also: Multi-paradigm programming language

   Makefiles, for example, specify dependencies in a declarative
   fashion,^[5] but include an imperative list of actions to take as well.
   Similarly, yacc specifies a context free grammar declaratively, but
   includes code snippets from a host language, which is usually
   imperative (such as C).

Logic programming[edit]

   Logic programming languages such as Prolog state and query relations.
   The specifics of how these queries are answered is up to the
   implementation and its theorem prover, but typically take the form of
   some sort of unification. Like functional programming, many logic
   programming languages permit side effects, and as a result are not
   strictly declarative.

Modeling[edit]

   Main article: Mathematical model

   Models, or mathematical representations, of physical systems may be
   implemented in computer code that is declarative. The code contains a
   number of equations, not imperative assignments, that describe
   ("declare") the behavioral relationships. When a model is expressed in
   this formalism, a computer is able to perform algebraic manipulations
   to best formulate the solution algorithm. The mathematical causality is
   typically imposed at the boundaries of the physical system, while the
   behavioral description of the system itself is declarative or acausal.
   Declarative modeling languages and environments include Modelica and
   Simile.^[6]

See also[edit]

     * Comparison of programming paradigms
     * Inductive programming

References[edit]

    1. ^ Lloyd, J.W., Practical Advantages of Declarative Programming
    2. ^ Declarative language in The Free On-line Dictionary of Computing,
       Editor Denis Howe.
    3. ^ "DAMP 2009: Workshop on Declarative Aspects of Multicore
       Programming". Cse.unsw.edu.au. 2009-01-20. Retrieved 2013-08-15.
    4. ^ http://www.cse.unsw.edu.au/~chak/papers/diss.ps.gz
    5. ^ [1]^[dead link]
    6. ^ "Declarative modelling". Simulistics. Retrieved 2013-08-15.

External links[edit]

     * Frans Coenen. Characteristics of declarative programming languages.
       1999.
     * Robert Harper. What, If Anything, Is A Declarative Language?. 2013.
     * Olof Torgersson. A Note on Declarative Programming Paradigms and
       the Future of Definitional Programming. 1996.


     * v
     * t
     * e

   Types of programming languages
     * Array
     * Aspect-oriented
     * Class-based
     * Concatenative
     * Concurrent
     * Data-structured
     * Dataflow
     * Declarative
     * Domain-specific
     * Dynamic
     * Esoteric
     * Event-driven
     * Extensible
     * Functional
     * Imperative
     * Logic
     * Macro
     * Metaprogramming
     * Multi-paradigm
     * Object-based
     * Object-oriented
     * Pipeline
     * Procedural
     * Prototype-based
     * Reflective
     * Rule-based
     * Scripting
     * Synchronous
     * Templating

     * Assembly
     * Compiled
     * Interpreted
     * Machine

     * Low-level
     * High-level
     * Very high-level

     * First generation
     * Second generation
     * Third generation
     * Fourth generation
     * Fifth generation

     * Non-English-based
     * Off-side rule
     * Visual

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Declarative_programming&oldi
   d=624382238"
   Categories:
     * Declarative programming
     * Programming paradigms

   Hidden categories:
     * All articles with dead external links
     * Articles with dead external links from August 2013
     * Articles lacking in-text citations from April 2010
     * All articles lacking in-text citations
     * Articles needing cleanup from August 2013
     * Articles needing link rot cleanup from August 2013
     * All articles needing link rot cleanup
     * Articles covered by WikiProject Wikify from August 2013
     * All articles covered by WikiProject Wikify
     * Articles containing potentially dated statements from 2013
     * All articles containing potentially dated statements

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * العربية
     * Azərbaycanca
     * Čeština
     * Deutsch
     * Ελληνικά
     * Español
     * فارسی
     * Français
     * Gaeilge
     * 한국어
     * Italiano
     * עברית
     * Bahasa Melayu
     * Nederlands
     * 日本語
     * Polski
     * Português
     * Русский
     * Svenska
     * Українська
     * 中文
     *

   Edit links

     * This page was last modified on 6 September 2014 at 06:27.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
