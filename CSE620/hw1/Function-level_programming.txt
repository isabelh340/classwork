   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Function-level programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   In computer science, function-level programming refers to one of the
   two contrasting programming paradigms identified by John Backus in his
   work on programs as mathematical objects, the other being value-level
   programming.

   In his 1977 Turing award lecture, Backus set forth what he considered
   to be the need to switch to a different philosophy in programming
   language design:^[1]

     Programming languages appear to be in trouble. Each successive
     language incorporates, with a little cleaning up, all the features
     of its predecessors plus a few more. [...] Each new language claims
     new and fashionable features... but the plain fact is that few
     languages make programming sufficiently cheaper or more reliable to
     justify the cost of producing and learning to use them.

   He designed FP to be the first programming language to specifically
   support the function-level programming style.

   A function-level program is variable-free (cf. point-free programming),
   since program variables, which are essential in value-level
   definitions, are not needed in function-level programs.

Contents

     * 1 Introduction
     * 2 Contrast to functional programming
     * 3 Example languages
     * 4 See also
     * 5 References

Introduction[edit]

   In the function-level style of programming, a program is built directly
   from programs that are given at the outset, by combining them with
   program-forming operations or functionals. Thus, in contrast with the
   value-level approach that applies the given programs to values to form
   a succession of values culminating in the desired result value, the
   function-level approach applies program-forming operations to the given
   programs to form a succession of programs culminating in the desired
   result program.

   As a result, the function-level approach to programming invites study
   of the space of programs under program-forming operations, looking to
   derive useful algebraic properties of these program-forming operations.
   The function-level approach offers the possibility of making the set of
   programs a mathematical space by emphasizing the algebraic properties
   of the program-forming operations over the space of programs.

   Another potential advantage of the function-level view is the ability
   to use only strict functions and thereby have bottom-up semantics,
   which are the simplest kind of all. Yet another is the existence of
   function level definitions that are not the lifted (that is, lifted
   from a lower value-level to a higher function-level) image of any
   existing value-level one: these (often terse) function-level
   definitions represent a more powerful style of programming not
   available at the value-level and, arguably, are often easier to
   understand and reason about.

Contrast to functional programming[edit]

   When Backus studied and publicized his function-level style of
   programming, his message was mostly misunderstood,^[2] giving boost to
   the traditional functional programming style languages instead of his
   own FP and its successor FL.

   Backus calls functional programming applicative programming; his
   function-level programming is a particular, constrained type of
   applicative programming.

   A key distinction from functional languages is that Backus' language
   has the following hierarchy of types:
     * atoms
     * functions, which take atoms to atoms
     * Higher-order functions (which he calls "functional forms"), which
       take one or two functions to functions

   ...and the only way to generate new functions is to use one of the
   functional forms, which are fixed: you cannot build your own functional
   form (at least not within FP; you can within FFP (Formal FP)).

   This restriction means that functions in FP are a module (generated by
   the built-in functions) over the algebra of functional forms, and are
   thus algebraically tractable. For instance, the general question of
   equality of two functions is equivalent to the halting problem, and is
   undecidable, but equality of two functions in FP is just equality in
   the algebra, and thus (Backus imagines) easier.

   Even today, many users of lambda style languages often misinterpret
   Backus' function-level approach as a restrictive variant of the lambda
   style, which is a de facto value-level style. In fact, Backus would not
   have disagreed with the 'restrictive' accusation: he argued that it was
   precisely due to such restrictions that a well-formed mathematical
   space could arise, in a manner analogous to the way structured
   programming limits programming to a restricted version of all the
   control-flow possibilities available in plain, unrestricted
   unstructured programs.

   The value-free style of FP is closely related to the equational logic
   of a cartesian-closed category.

Example languages[edit]

   Main category: Function-level languages

   The canonical function-level programming language is FP. Others include
   FL, FPr and J.

See also[edit]

     * Value-level programming, imperative programming (contrast)
     * Functional programming, declarative programming (compare)
     * Programming paradigms
     * Pipeline programming
     * Tacit programming
     * Concatenative programming language

References[edit]

    1. ^ http://www.stanford.edu/class/cs242/readings/backus.pdf
    2. ^ Hudak, Paul (1989). "Conception, Evolution, And Application Of
       Functional Programming Languages". ACM Computing Surveys, Vol. 21,
       No. 3

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Function-level_programming&o
   ldid=545494842"
   Categories:
     * Programming paradigms
     * Programming language theory

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Čeština
     * Español
     * Galego
     * Русский
     *

   Edit links

     * This page was last modified on 19 March 2013 at 19:22.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
