   #alternate Edit this page Wikipedia (en) alternate copyright Wikipedia
   Atom feed

Feature-oriented programming

   From Wikipedia, the free encyclopedia
   Jump to: navigation, search
             Programming paradigms
     * Action
     * Agent-oriented
     * Aspect-oriented
     * Automata-based
     * Concurrent computing
          + Relativistic programming
     * Data-driven
     * Declarative (contrast: Imperative)
          + Constraint
          + Dataflow
               o Flow-based
               o Cell-oriented (spreadsheets)
               o Reactive
          + Functional
               o Functional logic
          + Logic
               o Abductive logic
               o Answer set
               o Constraint logic
               o Functional logic
               o Inductive logic
     * End-user programming
     * Event-driven
          + Service-oriented
          + Time-driven
     * Expression-oriented
     * Feature-oriented
     * Function-level (contrast: Value-level)
     * Generic
     * Imperative (contrast: Declarative)
          + Procedural
     * Language-oriented
          + Natural language programming
          + Discipline-specific
          + Domain-specific
          + Grammar-oriented
               o Dialecting
          + Intentional
     * Metaprogramming
          + Automatic
          + Reflective
               o Attribute-oriented
          + Homoiconic
          + Template
               o Policy-based
     * Non-structured (contrast: Structured)
          + Array
     * Nondeterministic
     * Parallel computing
          + Process-oriented
     * Point-free style
          + Concatenative
     * Semantic
     * Structured (contrast: Non-structured)
          + Block-structured
          + Modular (contrast: Monolithic)
          + Object-oriented (OOP)
               o By separation of concerns:
                    # Aspect-oriented
                    # Role-oriented
                    # Subject-oriented
               o Class-based
               o Prototype-based
          + Recursive
     * Value-level (contrast: Function-level)
     * Probabilistic
     * Concept

     * v
     * t
     * e

   Feature Oriented Programming (FOP) or Feature Oriented Software
   Development (FOSD) is a general paradigm for program synthesis in
   software product lines.
   Connection Between Layer Stacks and Transformation Compositions

   FOSD arose out of layer-based designs and levels of abstraction in
   network protocols and extensible database systems in the
   late-1980s.^[1] A program was a stack of layers. Each layer added
   functionality to previously composed layers and different compositions
   of layers produced different programs. Not surprisingly, there was a
   need for a compact language to express such designs. Elementary algebra
   fit the bill: each layer was function (program transformation) that
   added new code to an existing program to produce a new program, and a
   program's design was modeled by an expression, i.e., a composition of
   transformations (layers). The figure below illustrates the stacking of
   layers h, j, and i (where h is on the bottom and i is on the top). The
   algebraic notations i(j(h))and i•j•h express these designs.

   Over time, the idea of layers was generalized to features, where a
   feature is an increment in program development or functionality. The
   paradigm for program design and synthesis was recognized to be a
   generalization of relational query optimization, where query evaluation
   programs were defined as relational algebra expressions, and query
   optimization was expression evaluation.^[2] A software product line
   (SPL) is a family of programs where each program is defined by a unique
   composition of features, and no two programs have the same combination.
   FOSD has since evolved into the study of feature modularity, tools,
   analyses, and design techniques to support feature-based program
   synthesis.

   Further advances in FOSD arose from recognizing the following facts:
   Every program has multiple representations (e.g., source, makefiles,
   documentation, etc.) and adding a feature to a program should elaborate
   each of its representations so that all representations are consistent.
   Additionally, some of these representations could be generated (or
   derived) from other representations. In this article, the mathematics
   of the three most recent generations of FOSD, namely GenVoca,^[1]
   AHEAD,^[3] and FOMDD^[4]^[5] are described, and links to product lines
   that have been developed using FOSD tools are provided. Also, four
   additional results that apply to all generations of FOSD are presented
   elsewhere: MetaModels, Program Cubes, Feature Algebras, and Feature
   Interactions.

Contents

     * 1 GenVoca
     * 2 AHEAD
     * 3 FOMDD
     * 4 Applications
     * 5 See also
     * 6 References

GenVoca[edit]

   GenVoca (a meld of the names Genesis and Avoca)^[1] is a compositional
   paradigm for defining programs of a product lines. Base programs are
   0-ary functions or transformations called values:
  f      -- base program with feature f
  h      -- base program with feature h

   and features are unary functions/transformations that elaborate
   (modify, extend, refine) a program:
  i • x  -- adds feature i to program x
  j • x  -- adds feature j to program x

   where • denotes function composition. The design of a program is a
   named expression, e.g.:
  p[1] = j • f       -- program p[1] has features j and f
  p[2] = j • h       -- program p[2] has features j and h
  p[3] = i • j • h   -- program p[3] has features i, j, and h

   A GenVoca model of a domain or software product line is a collection of
   base programs and features (see MetaModels and Program Cubes). The
   programs (expressions) that can be created defines a product line.
   Expression optimization is program design optimization, and expression
   evaluation is program synthesis.

          Note: GenVoca is based on the stepwise development of programs:
          a process that emphasizes design simplicity and
          understandability, which are key to program comprehension and
          automated program construction. Consider program p[3] above: it
          begins with base program h, then feature j is added (read: the
          functionality of feature j is added to the codebase of h), and
          finally feature i is added (read: the functionality of feature i
          is added to the codebase of j•h).

          Note: not all combinations of features are meaningful. Feature
          models (which can be translated into propositional formulas) are
          graphical representations that define legal combinations of
          features.^[6]

          Note: A more recent formulation of GenVoca is symmetric: there
          is only one base program, 0 (the empty program), and all
          features are unary functions. This suggests the interpretation
          that GenVoca composes program structures by superposition, the
          idea that complex structures are composed by superimposing
          simpler structures.^[7]^[8] Yet another reformulation of GenVoca
          is as a monoid: a GenVoca model is a set of features with a
          composition operation (•); composition is associative and there
          is an identity element (namely 1, the identity function).
          Although all compositions are possible, not all are meaningful
          as mentioned above.

   GenVoca features were originally implemented using C preprocessor
   (#ifdef feature ... #endif) techniques. A more advanced technique,
   called mixin layers, showed the connection of features to
   object-oriented collaboration-based designs.

AHEAD[edit]

   Algebraic Hierarchical Equations for Application Design (AHEAD) ^[3]
   generalized GenVoca in two ways. First it revealed the internal
   structure of GenVoca values as tuples. Every program has multiple
   representations, such as source, documentation, bytecode, and
   makefiles. A GenVoca value is a tuple of program representations. In a
   product line of parsers, for example, a base parser f is defined by its
   grammar g[f], Java source s[f], and documentation d[f]. Program f is
   modeled by the tuple f=[g[f], s[f], d[f]]. Each program representation
   may have subrepresentations, and they too may have subrepresentations,
   recursively. In general, a GenVoca value is a tuple of nested tuples
   that define a hierarchy of representations for a particular program.

                Hierarchical Relationships among Program Artifacts
                Example. Suppose terminal representations are files. In
                AHEAD, grammar g[f] corresponds to a single BNF file,
                source s[f] corresponds to a tuple of Java files
                [c[1]…c[n]], and documentation d[f] is a tuple of HTML
                files [h[1]…h[k]]. A GenVoca value (nested tuples) can be
                depicted as a directed graph: the graph for program f is
                shown in the figure to the right. Arrows denote
                projections, i.e., mappings from a tuple to one of its
                components. AHEAD implements tuples as file directories,
                so f is a directory containing file g[f] and
                subdirectories s[f] and d[f]. Similarly, directory s[f]
                contains files c[1]…c[n], and directory df contains files
                h[1]…h[k].

                Note: Files can be hierarchically decomposed further. Each
                Java class can be decomposed into a tuple of members and
                other class declarations (e.g., initialization blocks,
                etc.).

   Second, AHEAD expresses features as nested tuples of unary functions
   called deltas. Deltas can be program refinements (semantics-preserving
   transformations), extensions (semantics-extending transformations), or
   interactions (semantics-altering transformations). We use the neutral
   term “delta” to represent all of these possibilities, as each occurs in
   FOSD.

   To illustrate, suppose feature j extends a grammar by \Delta g[j] (new
   rules and tokens are added), extends source code by \Delta s[j] (new
   classes and members are added and existing methods are modified), and
   extends documentation by \Delta d[j]. The tuple of deltas for feature j
   is modeled by j=[ \Delta g[j], \Delta s[j], \Delta d[j]], which we call
   a delta tuple. Elements of delta tuples can themselves be delta tuples.
   As an example, \Delta s[j] represents the changes that are made to each
   class in s[f] by feature j, i.e., \Delta s[j]=[ \Delta c[1]… \Delta
   c[n]]. The representations of a program are computed recursively by
   composing tuples element-wise. The representations for parser p (whose
   GenVoca expression is j•f) are:
  p[2] = j • f                            -- GenVoca expression
     = [ \Delta g[j],  \Delta s[j],  \Delta d[j]] • [g[f], s[f], d[f]]   -- subs
titution
     = [ \Delta g[j]•g[f],  \Delta s[j]•s[f],  \Delta d[j]•d[f]]         -- comp
ose tuples element-wise

   That is, the grammar of p is the base grammar composed with its
   extension ( \Delta g[j]•g[f]), the source of p is the base source
   composed with its extension ( \Delta s[j]•s[f]), and so on. As elements
   of delta tuples can themselves be delta tuples, composition recurses,
   e.g., \Delta s[j]•s[f]= [ \Delta c[1]… \Delta c[n]]•[c[1]…c[n]]=[
   \Delta c[1]•c[1]… \Delta c[n]•c[n]]. Summarizing, GenVoca values are
   nested tuples of program artifacts, and features are nested delta
   tuples, where • recursively composes them. This is the essence of
   AHEAD.

   The ideas presented above concretely expose two FOSD principles. The
   Principle of Uniformity states that all program artifacts are treated
   and refined in the same way. (This is evidenced by deltas for different
   artifact types above). The Principle of Scalability states all levels
   of abstractions are treated uniformly. (This gives rise to the
   hierarchical nesting of tuples above).

   The original implementation of AHEAD is the AHEAD Tool Suite and Jak
   language, which exhibits both the Principles of Uniformity and
   Scalability. Next-generation tools include CIDE ^[9] and
   FeatureHouse.^[10]

FOMDD[edit]

   Derivational and Refinement Relationships among Program Artifacts

   Feature Oriented Model Driven Design (FOMDD) ^[4]^[5] combines the
   ideas of AHEAD with Model Driven Design (MDD) (a.k.a. Model-Driven
   Architecture (MDA)). AHEAD functions capture the lockstep update of
   program artifacts when a feature is added to a program. But there are
   other functional relationships among program artifacts that express
   derivations. For example, the relationship between a grammar g[f] and
   its parser source s[f] is defined by a compiler-compiler tool, e.g.,
   javacc. Similarly, the relationship between Java source s[f] and its
   bytecode b[f] is defined by the javac compiler. A commuting diagram
   expresses these relationships. Objects are program representations,
   downward arrows are derivations, and horizontal arrows are deltas. The
   figure to the right shows the commuting diagram for program p[3] =
   i•j•h = [g[3],s[3],b[3]].

   A fundamental property of a commuting diagram is that all paths between
   two objects are equivalent. For example, one way to derive the bytecode
   b[3] of parser p[3] (lower right object in the above figure) from
   grammar g[f] of parser f (upper left object) is to derive the bytecode
   b[f] and refine to b[3], while another way refines g[f] to g[3], and
   then derive b[3]:
   \Delta b[i] •  \Delta b[j] • javac • javacc = javac • javacc •  \Delta g[i]
•  \Delta g[j]

   There are \tbinom{4}{2} possible paths to derive the bytecode b[3] of
   parser p[3] from the grammar g[f] of parser f. Each path represents a
   metaprogram whose execution synthesizes the target object (b[3]) from
   the starting object (g[f]). There is a potential optimization:
   traversing each arrow of a commuting diagram has a cost. The cheapest
   (i.e., shortest) path between two objects in a commuting diagram is a
   geodesic, which represents the most efficient metaprogram that produces
   the target object from a given object.

          Note: A “cost metric” need not be a monetary value; cost may be
          measured in production time, peak or total memory requirements,
          some informal metric like “ease of explanation”, or a
          combination of the above (e.g., multi-objective optimization).
          The idea of a geodesic is quite general, and should be
          understood and appreciated from this more general context.

          Note: It is possible for there to be m starting objects and n
          ending objects in a geodesic; when m=1 and n>1, this is the
          Directed Steiner Tree Problem, which is NP-hard.

   Commuting diagrams are important for at least two reasons: (1) there is
   the possibility of optimizing the synthesis of artifacts (e.g.,
   geodesics) and (2) they specify different ways of constructing a target
   object from a starting object.^[4]^[11] A path through a diagram
   corresponds to a tool chain: for an FOMDD model to be consistent, it
   should be proven (or demonstrated through testing) that all tool chains
   that map one object to another in fact yield equivalent results. (If
   different paths/tool chains yield different results, then either there
   is a bug in one or more of the tools or the FOMDD model is wrong).

          Note: the above ideas were inspired by category theory.^[4]^[5]

Applications[edit]

     * Network Protocols
     * Extensible Database Systems
     * Data Structures
     * Distributed Army Fire Support Simulator
     * Production System Compiler
     * Graph Product Line
     * Extensible Java Preprocessors
     * Web Portlets
     * SVG Applications

See also[edit]

     * FOSD MetaModels—product lines of product lines
     * FOSD Program Cubes—multi-dimensional product lines
     * FOSD Feature Algebras—basic operations from which FOSD features
       (0-ary and 1-ary) functions are defined
     * FOSD Feature Interactions—general concepts for feature interactions

References[edit]

    1. ^ ^a ^b ^c "Design and Implementation of Hierarchical Software
       Systems with Reusable Components".
    2. ^ "Access Path Selection In Relational Databases".
    3. ^ ^a ^b "Scaling Step-Wise Refinement".
    4. ^ ^a ^b ^c ^d "Feature Oriented Model Driven Development: A Case
       Study for Portlets".
    5. ^ ^a ^b ^c "Generative Metaprogramming".
    6. ^ "Feature Models, Grammars, and Propositional Formulas".
    7. ^ "An Algebra for Features and Feature Composition".
    8. ^ "Superimposition: A Language-Independent Approach to Software
       Composition".
    9. ^ "Guaranteeing Syntactic Correctness for all Product Line
       Variants: A Language-Independent Approach".
   10. ^ "FeatureHouse: Language-Independent, Automated Software
       Composition".
   11. ^ "Testing Software Product Lines Using Incremental Test
       Generation".

   Retrieved from
   "http://en.wikipedia.org/w/index.php?title=Feature-oriented_programming
   &oldid=622921980"
   Categories:
     * Feature-oriented programming

Navigation menu

Personal tools

     * Create account
     * Log in

Namespaces

     * Article
     * Talk

Variants

Views

     * Read
     * Edit
     * View history

More

Search

   ____________________ Search Go

Navigation

     * Main page
     * Contents
     * Featured content
     * Current events
     * Random article
     * Donate to Wikipedia
     * Wikimedia Shop

Interaction

     * Help
     * About Wikipedia
     * Community portal
     * Recent changes
     * Contact page

Tools

     * What links here
     * Related changes
     * Upload file
     * Special pages
     * Permanent link
     * Page information
     * Wikidata item
     * Cite this page

Print/export

     * Create a book
     * Download as PDF
     * Printable version

Languages

     * Deutsch
     * Українська
     *

   Edit links

     * This page was last modified on 26 August 2014 at 19:02.
     * Text is available under the Creative Commons Attribution-ShareAlike
       License; additional terms may apply. By using this site, you agree
       to the Terms of Use and Privacy Policy. Wikipedia® is a registered
       trademark of the Wikimedia Foundation, Inc., a non-profit
       organization.

     * Privacy policy
     * About Wikipedia
     * Disclaimers
     * Contact Wikipedia
     * Developers
     * Mobile view

     * Wikimedia Foundation
     * Powered by MediaWiki
